<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="xdoc2html.xsl"?>
<!DOCTYPE document PUBLIC "-//APACHE//DTD Documentation V2.0//EN" "https://forrest.apache.org/dtd/document-v20.dtd">
<document>
    <header>
        <title>IrScrutinizer documentation</title>
    </header>
    <body>
        <note>This is a reference manual. It is written for completeness and correctness, not
            for accessibility. For an easier introduction, see
            <a href="http://www.hifi-remote.com/wiki/index.php?title=IrScrutinizer_Guide">this tutorial</a>.
            Or, just try the program, and come back to the manual if and when you need it.
        </note>

        <warning>Sending undocumented IR commands to
            your equipment may damage or even destroy it. By using this program,
            you agree to take the responsibility for possible damages yourself, and
            not to hold the author responsible.</warning>
        <table>
            <caption>Revision history</caption>
            <tr>
                <th>Date</th>
                <th>Description</th>
            </tr>
            <tr>
                <td>2013-11-12</td>
                <td>Initial version.</td>
            </tr>
            <tr>
                <td>2013-12-01</td>
                <td>Next unfinished version.</td>
            </tr>
            <tr>
                <td>2014-01-22</td>
                <td>Version for release 1.0.0, still leaving much to be desired.</td>
            </tr>
            <tr>
                <td>2014-06-07</td>
                <td>Version for release 1.1.0, some fixes, much still to be done.</td>
            </tr>
            <tr>
                <td>2014-09-21</td>
                <td>Version for release 1.1.1, some more fixes and enhancements.</td>
            </tr>
            <tr>
                <td>2015-04-07</td>
                <td>Version for release 1.1.2, installation issued reworked. Misc. minor improvements.</td>
            </tr>
            <tr>
                <td>2015-08-19</td>
                <td>Version for release 1.1.3. Misc. minor improvements.</td>
            </tr>
            <tr>
                <td>2016-01-13</td>
                <td>Added description for user selectable character sets for import and export.</td>
            </tr>
            <tr>
                <td>2016-04-29</td>
                <td>Version for release 1.2. Misc. minor improvements.</td>
            </tr>
            <tr>
                <td>2016-08-30</td>
                <td>Version for release 1.3. Misc. minor improvements.</td>
            </tr>
            <tr>
                <td>2017-03-12</td>
                <td>Version for release 1.4. Misc. minor improvements.</td>
            </tr>
            <tr>
                <td>2019-08-09</td>
                <td>Version for release 2.0.0. Not complete...</td>
            </tr>
            <tr>
                <td>2020-05-03</td>
                <td>Updated installation instructions.</td>
            </tr>
            <tr>
                <td>2020-05-20</td>
                <td>Minor updates for version 2.2.6.</td>
            </tr>
            <tr>
                <td>2020-07-30</td>
                <td>Updated building instructions.</td>
            </tr>
            <tr>
                <td>2022-05-13</td>
                <td>Updated for 2.4.0: Considerable update and rewrite, for upcoming release 2.4.0.</td>
            </tr>
            <tr>
                <td>2022-12-19</td>
                <td>Misc. fixes and updates.</td>
            </tr>
            <tr>
                <td>2023-12-17</td>
                <td>Accessing HarcHardware command line is now supported in AppImages.</td>
            </tr>
            <tr>
                <td>2023-12-26</td>
                <td>Removed leftover references to the "minimal json" as well as Fedore dnf tonto.</td>
            </tr>
            <tr>
                <td>2024-01-05</td>
                <td>Removed GlobalCache IR database.</td>
            </tr>
            <tr>
                <td>2024-03-12</td>
                <td>Added link to Lirc imports with and without timing info. Updated command line parameters. Misc fixes and updates.</td>
            </tr>
            <tr>
                <td>2025-04-11</td>
                <td>Changed most <code>http:</code> to <code>https:</code></td>
            </tr>
        </table>

        <section>
            <title>Introduction</title>
            <p>
                IrScrutinizer is a powerful program for capturing, rendering, analyzing,
                importing, and
                exporting of infrared (IR) signals. For capturing and sending IR signals
                several different hardware sensors and senders are supported. IR Signals can be
                imported not only by capturing from one of the supported hardware
                sensors (among others: IrWidget, Global Caché, Command Fusion, and Arduino), but also from a
                number of different file formats (among others: Lirc, Wave, CML, Pronto Classic and
                -professional, and different text based formats; not only from
                files, but also from the clipboard, from URLs, and from file hierarchies), as
                well as the Internet IR Databases by Global Caché and by IRDB. Imported signals
                can be decoded, analyzed, edited, and visualized. A collection of
                IR signal can thus be assembled and edited, and finally exported in one of the
                many supported formats.  In addition, the program contains the powerful
                IrpTransmogrifier IR-renderer, which means that almost all IR protocols known to the
                Internet community can be generated.</p>

            <p>Written in Java (with the exception of two native libraries), most of the
                functionality of the program is available on every Java platform. The native
                library (NRJavaSerial) is presently available for 32- and 64-bit
                versions of Windows, Linux (x86, amd-64, arm version 7), and MacOsX, and can with moderate effort be compiled for other
                platforms. (The library DevSlashLirc is available (and meaningful!) for Linux only.)</p>
            <p>
                For someone with knowledge in the problem domain of IR signals and
                their parametrization, this program is believed to be simple to
                use. This knowledge is assumed from the reader. Other can acquire that
                knowledge either from the <a
                    href="http://www.hifi-remote.com/wiki/index.php?title=Main_Page">JP1
                    Wiki</a>
                or, e.g., <a href="https://www.sbprojects.net/knowledge/ir">this
                    link</a>.
            </p>

            <p>Note that screen shots are included as illustrations only; they may not
                depict the current program completely accurately. They come from different
                versions of  the program, using different platforms (Linux and Windows), and
                using different "look and feels".</p>

            <p>Sources are hosted on <a href="https://github.com/bengtmartensson/IrScrutinizer">Github</a>.
                Bug reports and enhancement requests are welcome (e.g. as
                <a href="https://github.com/bengtmartensson/IrScrutinizer/discussions">discussions</a>,
                <a href="https://github.com/bengtmartensson/IrScrutinizer/issues">issues</a>), or
                as contributions (code, testing, documentation, use cases, protocols etc.).
            </p>

            <p>The present document is written more for completeness than for
                easy accessibility. For an easier introduction, see
                <a href="http://www.hifi-remote.com/wiki/index.php?title=IrScrutinizer_Guide">this tutorial</a>.
            </p>
            <p>Here are the current <a href="IrScrutinizer.releasenotes.txt">release
                    notes</a>.</p>

            <section>
                <title>Background</title>
                <p>
                    In 2011 I wrote an IR signal "engine"
                    called <a href="IrpMaster.html">IrpMaster</a>. It can also be invoked as a
                    command line program. Then a program
                    called <a href="IrMaster.html">IrMaster</a> was released, which among other things
                    constitutes a user friendly GUI front end to IrpMaster. The present program,
                    IrScrutinizer, was also based on IrpMaster, and adds functionality from
                    IrMaster, in particular the possibility to collect IR signals, a vastly
                    improved import and export facility, and edit collections of IR commands.

                    IrScrutizer <a href="IrScrutinizer.html#Does+IrScrutinizer+completely+replaces+IrMaster%3F">almost</a> completely replaces IrMaster.
                    The final version of the latter was released in February 2014, slightly ironically called version
                    1.0.0.  No further development is planned.</p>

                <p>The final version of IrScrutinizer using IrpMaster and the decoding engine <a href="Glossary.html#DecodeIR">DecodeIR</a> is called 1.4.3, and is <a href="https://github.com/bengtmartensson/IrScrutinizer/releases/tag/Version-1.4.3">available here</a>.
                    Since version 2.0.0, the newer IR engine <a href="IrpTransmogrifier.html">IrpTransmogrifier</a>
                    has replaced IrpMaster, DecodeIR and Analyzer.</p>
            </section>

            <section>
                <title>Copyright and License</title>
                <p>The program, as well as this document, is copyright by myself. My
                    copyright does not extend to the embedded "components", like Jirc.
                    IrpTransmogrifier is using ANTLR4 and depends on the run time functions of ANTLR4, which
                    is <a href="https://www.antlr.org/license.html">free software with BSD license</a>.</p>
                <p>
                    The "database file" <code>IrpProtocols.xml</code> is derived from <a
                        href="http://www.hifi-remote.com/wiki/index.php?title=DecodeIR">DecodeIR.html</a>,
                    as well as many, many discussions with, and contributions from, members of the JP1 community,
                    thus I do not claim copyright.
                </p>
                <p>The program uses <a
                        href="https://jcommander.org">JCommander</a> by  Cédric Beust to parse the
                    command line arguments. It is free software with <a
                        href="https://github.com/cbeust/jcommander/blob/master/license.txt">Apache
                        2</a> license.</p>

                        <p>Icons by <!-- Domain nonexisting   a href="http://www.everaldo.com"-->Everaldo Coelho from the
                            Crystal project are used; these are released under the <a href="https://www.gnu.org/licenses/lgpl.html">LGPL license</a>.</p>

                        <p>The Windows installer was built with <a
                                href="https://www.jrsoftware.org/isinfo.php">Inno Setup</a>, which is <a
                                href="https://www.jrsoftware.org/files/is/license.txt">free software</a> by
                            <a
                                href="https://www.jrsoftware.org">Jordan Russel</a>.  To modify the user's path in Windows, the Inno extension <code>
                                modpath</code> by Jared Breland, distributed under
                            the <a href="https://www.gnu.org/licenses/lgpl.html">GNU Lesser General Public
                                License (LGPL), version 3</a>.</p>

                        <p>Serial communication is handled by
                            the <a href="https://github.com/NeuronRobotics/nrjavaserial">Neuron Robotics NRSerialPort library</a>
                            licensed under the <a href="https://github.com/NeuronRobotics/nrjavaserial/blob/master/LICENSE">LGPL
                                v 2.1 license</a>. (This is a fork of the discontinued
                            <a href="http://rxtx.qbang.org/wiki/index.php/Main_Page">RXTX library</a>.)
                        </p>

                        <p>
                            <a href="https://www.lirc.org">Lirc (Linux Infrared Remote Control)</a> is according
                            to its web site copyright 1999 by Karsten Scheibler
                            and Christoph Bartelmus (with contribution of may others), and is licensed
                            under <a href="https://www.gnu.org/licenses/old-licenses/gpl-2.0.html">GPL2</a>. The parts used here have been translated to Java by myself,
                            available with the name <a href="https://github.com/bengtmartensson/Jirc">Jirc</a>.</p>

                        <p>For Pronto Classic support, <a href="https://github.com/stewartoallen/tonto">Tonto</a> by Stewart Allen was used. It is licensed under the
                            <a href="Tonto-license.txt">"Clarified Artistic License"</a>.</p>

                        <p>The program contains icons from <a href="http://dangerousprototypes.com/">Dangerous Prototypes</a>
                            and <a href="http://irtrans.com">IrTrans</a>. These are used exclusively in the context of these firms, and only
                            used to illustrate their products. The icons for JP1 and Lirc are also
                            exclusively used to illustrate the community, their products, and files.</p>

                        <p>
                            The program and its documentation are licensed under the <a
                                href="https://www.gnu.org/licenses/gpl.html">GNU General Public License version
                                3</a>, making everyone free to use, study, improve, etc., under certain
                            conditions.</p>

                        <p>File formats, their description in human- or
                            machine-readable form (DTDs, XML Schemas), are placed in the public domain.</p>
            </section>

            <section>
                <title>Privacy note</title>
                <p>
                    Some functions (Help -> Project Home page, Help -> IRP Notation Spec, Help ->
                    Protocol Specs, Tools -> Check for updates) access the Internet using standard
                    http calls. This causes the originating machine's IP-address, time and date, the
                    used browser, and possibly other information to be stored on the called
                    server. If this is a concern for you, please do not use this (non-critical)
                    functionality (or block your computer's Internet access).</p>
            </section>
        </section>

        <section>
            <title>Overview</title>
            <p>Next a high-level view of the different use cases will be given.</p>
            <dl>
                <dt>Analyze ("Scrutinize") individual IR Signal/Ir Sequence</dt>
                <dd>An <a href="Glossary.html#IrSignal">IrSignal</a> or <a
                        href="Glossary.html#IrSequence">IrSequence</a> can be <a href="Glossary.html#Capturing">captured</a> from connected hardware, or
                    imported from files in different formats, the clipboard or from Internet
                    databases. The IrSequence can be broken into a <a
                        href="Glossary.html#StartSequence">beginning-</a>, <a href="Glossary.html#RepeatSequence">repeat-</a> and
                    <a href="Glossary.html#EndingSequence">ending
                        sequence</a>, and <a href="Glossary.html#Decode">decoded</a>, analyzed, and plotted. It can
                    be exported in different
                    formats, or sent to different transmitting hardware.</dd>

                <dt>Analyze/edit/compose/export collections of IR signals ("<a href="Glossary.html#Remote">"remotes"</a>)</dt>
                <dd>A collection of commands can be assembled either from individual IR
                    signals (as above), captured several at a time, or imported from files in
                    different formats, the clipboard, or from Internet databases. The collection
                    and the individual commands can be edited as in a spreadsheet. It can be
                    exported in a number of different formats.</dd>

                <dt>Generate (render) IR Signals from known <a href="Glossary.html#IrProtocol">protocols</a></dt>
                <dd>IR Signals can be generated from the Internet's largest protocol data
                    base, containing over 100 protocol. Necessary protocol parameter values are to be
                    entered. Thus generated signals can be analyzed as single signals, incorporated
                    into remotes, or exported to files &mdash; also from e.g. intervals of
                    parameters.</dd>
            </dl>
        </section>

        <section>
            <title>Installation</title>
            <section>
                <title>Download</title>
                <p>The latest official release is always <a href="https://github.com/bengtmartensson/IrScrutinizer/releases/latest">available here</a>.</p>
                <p>In addition, there are <a href="https://github.com/bengtmartensson/IrScrutinizer/releases/tag/ci-build">continuous integration builds</a>,
                    at least most of the time. These are build from a snapshot of the current sources. Because of this, they are more likely to be unstable, contain bugs,
                    or even to be outright useless.
                </p>
            </section>
            <section>
                <title>General</title>
                <p>IrScrutinizer, and all but two of its third-party additions, are written in Java,
                    which means that it should run on almost all current computer:
                    Windows, Linux (including Raspberry Pi), Macintosh, etc.
                    Many of the installation options come with its own contained Java, for the other options,
                    the Java runtime (presently version 8 or later) must be installed.
                    The exception is the native part of <code>NRJavaSerial</code>, which are written in C , and invoked as native, shared library
                    (<code>.dll</code> in Windows, <code>.so</code> in Linux, <code>.jnilib</code> in Mac OS X).
                    For Linux, there is also the <code>DevSlashLirc</code> library,
                    for accessing Lirc compatible hardware.
                    If the shared libraries are
                    not available on for a particular platform it is not a major problem, as most parts of IrScrutinizer will
                    work fine without it; just the serial
                    hardware access, or the access to certain hardware will be unavailable.</p>

                <p>In all versions, IrScrutinizer behave civilized, in that the installation
                    directory is not written to, and thus can be read-only as soon as the installation has taken place.
                </p>
                <p>To use all functionality of the program, it may be necessary to explicitly white-list some ports in a firewall.
                    These are listed <a href="#Firewall+issues%3F">here</a>.</p>
                <p>There are five different way of installing the program, described next.</p>
            </section>
            <section>
                <title>Windows</title>
                <p>Download the Window setup
                    file and double click it. Select any installation
                    directory you like; suggested is <code>C:\Program Files\IrScrutinizer</code>.
                    Select creation of the start menu folder and the desktop
                    icon (unless you prefer it otherwise). If administrator rights are present, the recommended installation location is in a subdirectory of <code>Program Files</code>.
                    Otherwise the program can be installed in any directory writable by currently available user rights.
                    The setup comes with a Java runtime, but it is also possible to use a compatible, existing installation.
                    IrScrutinizer can now be started from <code>Start -> IrScrutinizer ->
                        IrScrutinizer</code>, or from the desktop icon.</p>

                <p>Sometimes Windows will refuse to install programs from sources that it does not consider as trustworthy.
                    It may then be necessary on Settings -> Apps &amp; features to select on "Choose where to get apps"
                    to something else than "The Microsoft store only".</p>

                <p>If desired, the installer will associate <code>.girr</code> files with the program, allowing them to
                    be opened by double clicking them.</p>

                <p>The installer will also install the command line program <a href="IrpTransmogrifier.html">IrpTransmogrifier</a>,
                    which can be called as <code>irptransmogrifier</code> from a command line window.
                    This also goes for <a href="HarcHardware.html">HarcHardware</a>.
                </p>

                <p>Sometimes, when starting the program for the first time, the Windows Defender Firewall blocks some features in the program,
                    asking for permission to allow the Java virtual machine (typically ending with <code>javaw.exe</code>) access. This should be granted.</p>
                <p>To uninstall, select the uninstall option from the Start menu, or (on Windows 10, right click <code>Start -> IrScrutinizer -> IrScrutinizer</code> and select Uninstall).
                    Or use the operating system's program management for de-installing (Settings -> Apps and Features).
                    Very pedantic people may like to delete the properties file too, see <a href="#Properties">properties</a>.</p>
            </section>

            <section>
                <title>AppImage for 64-bit Linux</title>
                <p>An <a href="https://appimage.org/">AppImage</a> is a distribution consisting of
                    one large monolithic executable file that is downloaded, made executable, and run, without any
                    installation in the classical sense. At this moment, only 64-bit x86 Linux is supported. It is believed
                    to run on all modern, 64-bit x86 Linux distributions. Just download,
                    make executable, and double click (or start from the command line).
                    It comes with its own Java runtime.</p>

                    <p>It called using the name <code>irptransmogrifier</code>, the <a href="IrpTransmogrifier.html">IrpTransmogrifier</a> program will be invoked,
                    taking its usual command line arguments.
                    Similarly, if called using the name <code>harchardware</code>, the <a href="HarcHardware.html">HarcHardware</a> main routine will be invoked.</p>

                <p>To uninstall, just delete.</p>

            </section>
            <section>
                <title>MacOS app</title>
                <p>Download the  disk image file (<code>*.dmg</code>).
                    Mount it by double clicking.
                    A mounted disk image <code>IrScrutinizer</code> will then appear on the desktop.
                    Opening it will show an app, and a few documentation files.
                    The app can just be dragged to the desktop, to the tray, to <code>Applications</code> or any other location the user prefers.
                    IrScrutinizer now behaves like any other app in Mac OS X.</p>

                <p>Sometimes the operating system will refuse to install or run programs from sources that it does not consider as trustworthy.
                    It may then be necessary on System Preferences -> Security &amp; privacy -> General to select on "Allow apps downloaded from"
                    to "Anywhere".</p>

                <p>To uninstall, just drag the program to the trash can.</p>
                <p>The command line programs <a href="IrpTransmogrifier.html">IrpTransmogrifier</a> and <a href="HarcHardware.html">HarcHardware</a> are not supported in this mode.
                    (For this, the <a href="#Generic+Binary">generic binary</a> distribution has to be used.)</p>
            </section>

            <section>
                <title>Generic Binary</title>
                <p>The generic binary version consists of all the Java classes packed in one executable jar file,
                    together with supporting files, like all the compiled shared libraries for the different
                    operating systems Linux (x64-32, x86-64, armv7), Windows (x86, 32 and 64 bits), and Macintosh.
                    It can be used on all those systems. (In other environments, the
                    shared libraries may be compiled with moderate effort.)</p>

                <p>The generic binary distribution also can be used whenever using the
                    setup.exe/app installation is not possible, not up-to-date, or just not desired.
                    It can also be used to update an existing installation on, e.g., Windows.</p>

                <p>First make sure that the Java runtime of correct version (currently version 8 or later) is installed.</p>

                <p>To install, unpack in an empty directory of your choice; suggested (for Unix/Linux) is
                    <code>/usr/local/share/irscrutinizer</code>. On Windows, the program can be started by double clicking the .jar file.</p>

                <p>The rest of this section applies to Unix/Linux.</p>
                <p>
                    There are a few additional steps, which, on Unix/Linux the script <code>setup-irscrutinizer.sh</code>
                    can take care of. If this is not desired, or does not work,
                    these steps will be described next.</p>

                <p>Inspect the wrapper <code>irscrutinizer.sh</code>, and
                    make changes if necessary.</p>

                <p>It is recommended to make links from a directory in the path to the
                    wrapper script, e.g.</p>
                <source>
                    ln -s /usr/local/share/irscrutinizer/irscrutinizer.sh /usr/local/bin/irscrutinizer
                    ln -s /usr/local/share/irscrutinizer/irscrutinizer.sh /usr/local/bin/irptransmogrifier
                    ln -s /usr/local/share/irscrutinizer/irscrutinizer.sh /usr/local/bin/harchardware
                </source>
<!--p>If your system comes with a natively and working RXTX, you should preferably use that. However, Fedora currently
    <a href="https://bugzilla.redhat.com/show_bug.cgi?id=1645856">ships with unusable RXTX</a>. See
    the comments in the wrapper <code>irscrutinizer.sh</code>.</p-->

    <!--p>The JNI libraries <code>libDecodeIR.so</code>/<code>DecodeIR.dll</code>/<code>libDecodeIR.jnilib</code> are contained in the
    distribution and should be found by the program in the installed location.</p-->

                <p>The desktop file <code>irscrutinizer.desktop</code> should, if desired, be
                    installed in <code>/usr/local/share/applications</code> alternatively
                    <code>~/.local/share/applications</code>.</p>

                <p>The program can now be started either as a desktop program, or by typing <code>irscrutinizer</code> on the command line.
                    Also the command line programs <a href="IrpTransmogrifier.html">IrpTransmogrifier</a> and <a href="HarcHardware.html">HarcHardware</a> can be started
                    by the command <code>irptransmogrifier</code> and <code>harchardware</code> respectively. It is also possible to start IrScrutinizer by double clicking
                    on the jar file. In case this brings up the archive manager, the desktop needs to be taught
                    to open executable jar files with the "java" application (i.e. the JVM). For this, select a jar file the file browser,
                    select the properties, and select "java" as the application to "open with". (The details might vary.)</p>

                <p>On Linux, it is general necessary to check, and possibly fix, the
                    <a href="#Linux%2FUnix+Serial+device+access">access to the serial devices</a>. The previously mentioned
                    wrapper does this.</p>

                <p>On Gnome-like desktops, by copying the file <code>girr.xml</code> to the system's data base of
                    known file types (normally located in <code>/usr/local/share/applications</code>),
                    <code>*.girr</code> files can be opened in IrScrutinizer by double click.
                    <!--For this, follow <a href="https://developer.gnome.org/integration-guide/stable/mime.html.en">this
                    description</a>.-->
                </p>

                <p>To uninstall, just delete the files. Some may like to delete the <a href="#Properties">properties file</a> too.</p>
            </section>

            <section>
                <title>Source distribution</title>
                <p>Compiling the sources is covered in the <a href="#building-from-sources">Appendix</a>.
                    This generates the generic binary distribution file, which is installed as described above.
                    Alternatively, it can be installed with the command</p>
                <source>
                    make install
                </source>
                <p>
                    possibly with <code>sudo</code> or as root.</p>
            </section>
            <section>
                <title>Linux/Unix Serial device access</title>
                <p>To access serial devices, including "serial" devices connected over USB, most current Linuxes
                    require the current user to be a member of the group <code>dialout</code>
                    (some distributions use the legacy name <code>uucp</code>),
                    in some cases (e.g. Fedora) also
                    the group <code>lock</code>. To grant user <code>$USER</code> this membership, typically a
                    command like
                    <code>sudo usermod -aG dialout $USER</code>, and/or <code>sudo usermod -aG lock $USER</code> is used.
                </p>
                <p>It has been brought to my attention that <a href="https://www.archlinux.org/">Arch Linux</a> (and likely others)
                    still use the older name <code>uucp</code> for <code>dialout</code>.</p>
                <p>Do not run this program as root (except possibly for debugging device access).</p>
            </section>
        </section>

        <section>
            <title>Concepts</title>
            <p>For anyone familiar with the problem domain, this
                program is believed to be intuitive and easy to use. Almost all user interface
                elements have tool-help texts. Different panes have their own pop-up help. In what follows, we will not attempt to
                explain every detail of the user interface, but rather concentrate on the
                concepts. Furthermore, it is possible that new elements and functionality has
                been implemented since the documentation was written.</p>
            <p>
                This program does not disturb the user with a number of
                annoying, often modal,
                pop ups, but directs errors, warnings, and status outputs to the <em>console window</em>,
                taking up the lower third of the main window. This
                window is re-sizeable. There is a context menu for the
                console, accessible by pressing the right mouse button in it.</p>
            <p>In the upper row, there are six pull-down menus, named <code>File,
                    Edit, Actions, Options, Tools</code> and <code>Help</code>. Their usage is believed to be mainly
                self explanatory, with some the exceptions.</p>

            <p>Options to the program are in general found in the <code>Options</code> menu, or its
                subordinate menus. Some parameters for particular export formats are found in
                the sub-panes of the <code>Export</code> pane. Also the hardware configuring panes contain
                user parameters.</p>

            <p>Options are in general saved persistently between sessions, in the <a href="#Properties">properties file</a>.</p>

            <p>
                The main window is composed of six sub panes denoted
                by <code>Scrutinize signal</code> (for processing a single signal), <code>Scrutinize remote</code> (for
                collecting several signals to one "remote"), <code>Render</code> (generates (renders) an IR signal
                from protocol name and parameters), <code>Import</code>, <code>Export</code>
                and <code>Hardware</code>.
                respectively. These panels will be discussed in Section <a
                    href="#GUI+Elements+walk+through">GUI Elements walk through</a>
            </p>
        </section>

        <section>
            <title>GUI Elements walk through</title>
            <section>
                <title>The "Scrutinize signal" pane</title>
        <p>This panel is devoted to the analysis of a <em>single <a href="Glossary.html#IrSignal">IR
                            signal</a>
                    </em> or <a href="Glossary.html#IrSequence">IR sequence</a>. A (single)
                    signal is either read from hardware using the "Capture" button (requires that
                    the capturing hardware has been set up, see Section <a href='#The+"Hardware"+pane'>Hardware</a>, imported
                    from a file (using the context menu in the data window, or through <code>File ->
                        Import -> Import as single sequence</code>), or pasted from the clipboard. Also, some
                    other panes can transfer data to this pane.</p>

                    <p>The button <code>Capt. (cont.)</code> a program tread is started, that continuously captures signals
                    from the hardware. Only the last signal is kept.</p>

                    <p>As shown, an IR signal
                consists of an (sometimes empty) <a href="Glossary.html#StartSequence">start sequence</a> (red),
                a (sometimes empty) <a href="Glossary.html#RepeatSequence">repeat sequences</a> (blue), and
                sometimes an <a href="Glossary.html#EndingSequence">ending sequence</a> (green).</p>

                    <p>For text
                    import, the signal can be in either Pronto Hex format or in raw format (indicated by
                    a leading "+"-sign).
                    The signal is printed in the
                    data window, in the preferred text format, which can be selected from the
                    options menu. The text representation may be edited (assuming sufficient
                    knowledge!), after which the edited signal is analyzed and plotted again by
                    pressing the <code>Scrutinize</code> button. The signal may be sent to the sending
                    hardware by pressing the <code>Transmit</code> button.</p>

                <p>Sometimes the "scrutinization" of a signal changes the numbers in an unexpected way.
                    If desired, the previous content of the data window is recalled by
                    <code>Actions -> Undo Scrutinizer data</code>.</p>

                <p>The plot can be horizontally zoomed by pressing the left mouse button and dragging.
                    Printing and exported as graph are presently not implemented.</p>

                <p>The menu entry <code>Actions -> Enter test signal</code> (or its accelerator, the F9
                    key) enters a test signal.</p>

                    <p>Using context menus, the result can be sent to the clipboard or saved
                        to a file. The menu entry <code>clone plot</code> makes a clone of the plot.
                        This can be used for visually comparing different sequences or signals.</p>

                    <p>
                        Note that transforming the signal between different formats may introduce
                        rounding errors. In rare cases, this may causing decoding
                        to fail.
                    </p>
                    <p>A Girr file can be dropped on the text- or plot windows. This will display
                        the concatenation of the signals in the file.</p>
            </section>
            <section>
                <title>The "Scrutinize remote" pane</title>
                <p>This panel is devoted to the capturing/import/editing of a collection of IR
                    signals, called  <em>a remote</em> in the sequel. The panel contains two sub-panels:
                    for <a href="Glossary.html#ParametricIRSignal">parametric signals</a> and for <a href="Glossary.html#RawIrSignal">non-parametric, "raw", signals</a>.</p>

                <p>A <em>parametric signal</em> is determined by its protocol name and the values of
                    the protocol's parameters. A <em>raw signal</em> is determined by its timing pattern,
                    and its modulation frequency. It may have one or many decodes, or
                    none. Nevertheless, by definition, a raw signal is determined by its timing,
                    not the decodes.
                </p>

                <p>In both cases, the sub panes consists of tables with a number of
                    columns. Every signal takes up a row in the table. The content of the
                    individual cells (with the exception of its number and date) can be
                    individually edited, like in a spreadsheet program.</p>

                <p>By clicking and dragging in the table head, the columns can be rearranged with the mouse.</p>

                <p>In both tables, the right mouse button opens a context menu containing a
                    number of ways to manipulate the table, its view, or the data contained
                    therein. By enabling the row selector, the rows can be sorted along any of the
                    present columns. </p>

                <p>Clicking a row with the middle mouse button selects that row, and (ir possible) transmits
                    it using the currently selected hardware.</p>

                    <p>To capture IR signals, first configure the hardware using the <a
                            href='#The+"Hardware"+pane'>hardware</a> pane. Next press the
                        <code>Capture</code> button. The program will now run the  capturing in a separate thread, so
                        the user just have to press the buttons of the remote. The signals will be
                        received, interpreted, decoded, and entered on subsequent lines in the selected
                        table (raw or parameterized). The capture thread will continue until the
                        captured button is pressed again. (Note that this is completely different from
                        the capture button on the <code>Scrutinize signal</code> panel.) The user may mix captures
                        with other activities, like entering information (name, comments,...) in the
                        table.</p>

                    <p>The export button exports the content of the currently selected table (raw
                        or parameterized) according to the currently selected export format.</p>

                    <p>A Girr file can be dropped on the parameter as well as the raw table, which will
                        import the contained signals.</p>

                    <p>The menu entry <code>Actions -> Enter test signal</code> (or its accelerator, the F9
                        key) enters a test signal, either as parametric signal, or as a raw signal.</p>
                    <section>
                        <title>The parametric table columns</title>
                        <dl>
                            <dt>#</dt>
                            <dd>A unique number assigned to the signal when creating. It is not editable and not exported.</dd>
                            <dt>Timestamp</dt>
                            <dd>A timestamp generated when the signal was entered or created. It is not editable and not exported.</dd>
                            <dt>Protocol</dt>
                            <dd>Name of the protocol. In the table, anything can be entered, however, to transmit or export, it has to match (case insensitively!) a known protocol.</dd>
                            <dt>D</dt>
                            <dd>The <code>D</code> parameter value, as defined in the protocol IRP.</dd>
                            <dt>S</dt>
                            <dd>The <code>S</code> parameter value, as defined in the protocol IRP.</dd>
                            <dt>F</dt>
                            <dd>The <code>F</code> parameter value, as defined in the protocol IRP.</dd>
                            <dt>T</dt>
                            <dd>The <code>T</code> parameter value, as defined in the protocol IRP.</dd>
                            <dt>Misc. params</dt>
                            <dd>All parameters not called <code>D</code>,  <code>S</code>,  <code>F</code>,  or <code>T</code>,
                                using syntax <em>name</em>
                                <code>=</code>
                                <em>value</em>,
                                for example <code>X=42 Y=73</code>. (Note that there are no spaces around the equal ("=") sign, but between the assignments.</dd>
                            <dt>Name</dt>
                            <dd>Name of the command. This is in principle arbitrary, however, to be able to constitute a meaningful export to a target device,
                                the names have to be unique within the table.</dd>
                            <dt>Comment</dt>
                            <dd>A textual comment. In most export formats, it is transmitted to the export, and the export format can treat it anyway it desires.</dd>
                        </dl>
                    </section>

                    <section>
                        <title>The raw table columns</title>
                        <dl>
                            <dt>#</dt>
                            <dd>A unique number assigned to the signal when creating. It is not editable and not exported.</dd>
                            <dt>Timestamp</dt>
                            <dd>A timestamp generated when the signal was entered or created. It is not editable and not exported.</dd>
                            <dt>Intro</dt>
                            <dd>The <a href="Glossary.html#IrSignal">intro sequence</a> of the command.</dd>
                            <dt>Repeat</dt>
                            <dd>The <a href="Glossary.html#IrSignal">repeat sequence</a> of the command.</dd>
                            <dt>Ending</dt>
                            <dd>The <a href="Glossary.html#IrSignal">ending sequence</a> of the command.</dd>
                            <dt>Name</dt>
                            <dd>Name of the command. This is in principle arbitrary, however, to be able to constitute a meaningful export to a target device,
                                the names have to be unique within the table.</dd>
                            <dt>Decode</dt>
                            <dd>The result of feeding the signal to the decoder. Not editable, not considered as authoritative information; serves only for information.</dd>
                            <dt>Analyze</dt>
                            <dd>The result of feeding the signal to the analyzer. Not editable, not considered as authoritative information; serves only for information.</dd>
                            <dt>Comment</dt>
                            <dd>A textual comment. In most export formats, it is transmitted to the export, and the target can treat it anyway it desires.</dd>
                            <dt>Frequency</dt>
                            <dd>Modulation frequency in Hz.</dd>
                        </dl>
                    </section>
            </section>
            <section>
                <title>The "Render" pane</title>
                <p>In the upper part of this pane, an  IR protocol is selected, identified by
                    name, and the parameters D ("device", in almost all protocols), S
                    ("sub-device", not in all protocols), F ("function", also called
                    command number or OBC, present in almost all protocols), as well as T, <a href="Glossary.html#toggle">"toggle"</a>
                    (in general 0 or 1, only in a few protocols). These number can be entered as
                    decimal numbers, or, by prepending "0x", as hexadecimal numbers.
                    Numbers with a leading "0" are interpreted as octal numbers.
                </p>

                <p>Earlier versions of this program (including documentation) used the word
                    <em>generate</em> instead of <em>render</em>.</p>

                <p>By pressing <code>Render</code>, the signal is computed, and the middle window is
                    filled with a textual representation in the form selected by <code>Options -> Output
                        Text Format</code>.</p>

                <p>For protocols with a toggle, leaving it unassigned (<code>T</code> left empty)
                    makes the rendering engine "toggle" in the sense that it changes its value on every invocation,
                    in accordance with the IRP.
                    The rendering engine is invoked not only by <code>Render</code>,
                    but also by <code>Transmit</code>, <code>Export</code>, and the <code>To ...</code> buttons.</p>

                <p>The Export button initiates an export to a file format currently selected on the <a
                        href="#The+Export+pane">Export pane</a>. The three lower buttons transfer the signal(s) to the
                    scrutinize signal panel, the raw remote table, or the parameterized panel.</p>

                <section>
                    <title>Accessing a number of different parameter values</title>
                    <p>
                        For the export and the transfer to the Scrutinize remote tables, not only a
                        single parameter value can be selected, but whole sets:</p>

                    <ol>
                        <li>Of course, there is the singleton set, just consisting of one value</li>
                        <li>There is also a possibility to give some arbitrary values,
                            separated by commas. Actually, the commas even separate sets, in the
                            sense of the current paragraph.</li>
                        <li>An interval, optionally with a stride different from 1, can be
                            given, either as <code>min..max++increment</code> or
                            <code>min:max++increment</code>, or alternatively, simply as *, which will get
                            the min and max values from the parameter's parameter specs.  </li>
                        <li>Also, a set can be given as <code>a:b&lt;&lt;c</code>,
                            which has the following semantics: starting with <code>a</code>, this
                            is shifted to the left by <code>c</code> bits, until <code>b</code>
                            has been exceeded (reminding of the left-shift operator <code>&lt;&lt;</code>
                            found in languages such as C).</li>
                        <li>Finally, <code>a:b#c</code> generates c pseudo random numbers between a and b
                            (inclusive). The "pseudo random" numbers are completely
                            deterministically determined from the seed.
                            The parameters <code>a</code> and
                            <code>b></code> are optional. If left out, the values are taken as from the protocol parameters min
                            and max respectively, just as with the <code>*</code> form.</li>
                    </ol>
                </section>
            </section>

            <section>
                <title>The Import pane</title>
                <p>The import pane allows for selective import of collection of <a
                        href="Glossary.html#Command">IR commands</a>. Both Internet data bases and
                    file formats are supported. Import can take place from local files or even file
                    hierarchies, from the clipboard or from Internet URLs.</p>

                <section>
                    <title>Tree importer</title>
                    <p>
                        the format of
                        an expandable tree. By placing the
                        mouse cursor over a command, additional information, like <a href="Glossary.html#Decode">decode</a>, is presented. A single
                        command can be selected by mouse click, a sequence of adjacent commands by
                        shift-click, a subset of not necessarily adjacent commands be selected by
                        Ctrl-click, as usual from most GUIs. A single selected command can be transferred to the
                        "Scrutinize signal" pane by pressing <code>Import signal</code>. The <code>Import all</code> (<code>Import
                            selection</code>) button
                        transfers all commands (the selected commands) to the <code>Scrutinize remote</code> pane,
                        sub-pane <code>Parametric remote</code> (without overwriting already present commands), while the buttons <code>Import all/raw</code> and <code>Import
                            selected/raw</code> transfer to the sub-pane <code>Raw remote</code>.</p>

                    <p>The key <code>Transmit selected</code> transmits the (single) selected signal to the
                        selected sending hardware.</p>
                </section>
                <section>
                    <title>Data bases</title>
                    <section>
                        <title>Global Caché's Control Tower data base</title>
                        <p>This is <a href="https://irdb.globalcache.com/">the new data base from Global Caché</a>. Unfortunately,
                            its <a href="https://www.globalcache.com/files/docs/CT_tos_ver1.pdf">Terms of Service</a>
                            are fairly restrictive. Also,
                            non-premium users are not allowed to download codes using the API.
                            For this reason, the program really only "browses" the data base.</p>

                        <p>To use its codes, log in with the browser (the <code>Web site</code> button goes to the home page),
                            and have the code set mailed in <a href="Glossary.html#CSV">CSV format</a> (press <code>Send Code Set</code>).
                            The mail received can be imported by the import text pane, raw subpane, Name col. = 1, Raw signal col = 2 (or 3),
                            Field separator: comma.
                        </p>
                    </section>

                    <section>
                        <title>Remotelocator</title>
                        <p>
                            <a href="https://github.com/bengtmartensson/RemoteLocator">RemoteLocator</a> is a program
                            to locate and download infrared remotes.   The <code>RemoteLocator</code> pane constitutes a GUI
                            to RemoteLocator.</p>

                        <p>
                            Currently, these four freely usable collections are supported:</p>
                        <dl>
                            <dt>
                                <a href="https://github.com/probonopd/irdb">IRDB</a>
                            </dt>
                            <dd>This collection was until recently available at the server <code>irdb.ik</code>, which is now defunct.
                                The IRDB format is a very simple <a href="Glossary.html#CSV">CSV format</a>,
                                containing command name, protocol and the device and subdevice parameters,
                                but no meta information. Instead, information on the manufacturer and the device class are gleaned from the file path.</dd>

                            <dt>
                                <a href="https://sourceforge.net/projects/lirc-remotes/">Lirc remotes</a>
                            </dt>
                            <dd>
                                <a href="https://lirc.org">Lirc</a>'s collection of remotes, which are collected in the Sourceforge project.
                                This format also contains no meta information.
                                The manufacturer information is gleaned from the file path; however there are no information on device class,
                                so all the Lirc remotes have device class "unknown" in the generated list.
                            </dd>
                            <dt>
                                <a href="https://github.com/bengtmartensson/GirrLib">GirrLib</a>
                            </dt>
                            <dd>
                                <a href="https://harctoolbox.org/Girr.html">Girr</a> is a very versatile format for IR remotes.
                                It is the native format for IrScrutinizer, and also supported by main program
                                <a href="https://sourceforge.net/projects/controlremote/">RMIR</a> of the <a href="https://hifi-remote.com/forums/index.php">JP1 project</a>.
                                Meta information, including manufacturer and device class, is contained in the Girr file.
                                There is a small collection (Girrlib),
                                which is more of a proof-of-concept than a sizeable collection of remotes.</dd>
                            <dt>
                                <a href="https://hifi-remote.com/forums/index.php">JP1</a>
                            </dt>
                            <dd>
                                The JP1 project has a large collection of "device upgrades". These are summarized in
                                <a href="https://www.hifi-remote.com/forums/dload.php?action=file&amp;file_id=26089">an Excel file</a>.
                                This list also contains meta information such as manufacturer and device class.
                                It can be read into the program, and used to browse the therein contained remotes (or rather, "device upgrades").
                                These can however not be directly loaded, but can with some manual work be translated to Girr files.
                            </dd>
                        </dl>
                        <p>To use, first select <code>Select me to load</code> to load the list of the manufacturers. Then select,
                            in order, a manufacturer, a <a href="Glossary.html#DeviceType">device
                                type</a>, and a remote name.
                            The field <code>kind</code> now indicates what kind of remote that was found.
                            Pressing <code>Load</code> (if enabled) will load the remote into the tree importer, where it can be <a href="#treeimporter">further manipulated</a>.</p>

                        <p>Pressing the <code>Load all</code> button transfers all present protocol/parameters
                            combinations to the tree.</p>
                    </section>
                </section>

                <section>
                    <title>File importers</title>

                    <p>There are a number of elements common to most of the sub-panes, so these
                        will be described next.</p>

                    <p>For file/URL based imports, there is a text field, named File or
                        File/URL. For the latter case, an URL (like
                        <code>https://lirc.sourceforge.net/remotes/yamaha/RX-V995</code>) can be
                        entered, for subsequent import without downloading to a local disc. By pressing
                        the <code>...</code>-Button, a file selector allows the selection of a local file. For
                        files and URLs, the <code>Edit/Browse</code> button allows to examine the selected
                        file/URL with the operating system's standard command.</p>

                    <p>Several of the formats (the one based on text files, but not on XML
                        (which carries its own character set declaration) allow the
                        user to select the character set to be used for the import to be selected.
                        This option is found as <code>Options -> Import options -> Character Set...</code>
                    </p>

                    <p>Most of the file based importers support dropping a compatible file
                        from the GUI on the import window.</p>

                    <p>If the option <code>Open ZIP files</code> (accessible from <code>Options
                            -> Import</code>) is
                        selected, zip files can  be selected, opened, and unzipped "on the fly",
                        without the need for the user to unzip to intermediate files.</p>

                    <p>When pressing one of the <code>Load</code>, <code>Load File/URL</code>, or <code>Load from clipboard</code>
                        button, the selected information is downloaded, and presented in a <a href="Tree+Importer">tree importer</a>.</p>


                    <p>The file based import formats allow a file to be "dropped" with the mouse on the main window.</p>

                    <section>
                        <title>Girr (the native format of IrScrutinizer)</title>
                        <p>The <a href="Glossary.html#Girr">Girr format</a> is the native format of
                            IrScrutinizer. The importer is capable of importing directory hierarchies.</p>
                    </section>

                    <section>
                        <title>Lirc</title>
                        <p>The <a href="Glossary.html#Lirc">Lirc</a> import feature is based upon <a
                                href="https://github.com/bengtmartensson/Jirc">Jirc</a>, which is basically a subset of Lirc 0.9.0 translated to Java.
                            The Lirc importer can even import a file
                            system hierarchy by selecting the top directory as File/URL. (Importing the
                            entire lirc.org database with over 100000 commands takes around 1 minute and 1GB
                            of memory.)</p>

                            <p>Only Lirc remotes with timing information can be imported, not the so-called lircccode remotes.
                                See <a href="https://github.com/bengtmartensson/IrScrutinizer/discussions/521">this article</a> for a more extensive discussion.</p>
                    </section>

                    <section>
                        <title>CML</title>
                        <p>The CML format is the format used by the RTI Integration Designer software.
                            Many CML files are available in Internet, in particular on
                            <a href="https://files.remotecentral.com/rti/index.html">RemoteCentral</a>.
                            Particularly noteworthy is the <a href="https://files.remotecentral.com/collection/66-1/index.html">"megalist" by Glackowitz</a>.
                            IrScrutinizer can import these files to its import tree, making every remote a nodes in the tree.
                            Note that there is no need to unzip such a file; IrScrutinizer will unzip it on the fly.
                        </p>
                    </section>

                    <section>
                        <title>Command Fusion</title>
                        <p>The native format that Command Fusion uses, file extension <code>.cfir</code>, can be imported here.</p>
                    </section>

                    <section>
                        <title>Pronto Classic (CCF format)</title>
                        <p>Many <a href="Glossary.html#ccfFileFormat">Pronto CCF files</a> are available in Internet,
                            in particular by <a
                                href="https://files.remotecentral.com/pronto/index.html">Remote
                                Central</a>. IrScrutinizer can read in these files to its import tree, even
                            preserving the Pronto "devices" as nodes in the tree.</p>
                    </section>

                    <section>
                        <title>Pronto Prof. (XCF format)</title>
                        <p>
                            <a href="Glossary.html#xcfFileFormat">Pronto Professional XCF</a> files are
                            found for example at <a
                                href="https://files.remotecentral.com/prontopro/index.html">Remote
                                Central</a>. IrScrutinizer can read in these files to its import tree, even
                            preserving the Pronto "devices" as nodes in the tree.</p>
                        <p>This is not extensively tested.</p>
                    </section>

                    <section>
                        <title>ICT IrScope format</title>
                        <p>The ICT format, introduced by Kevin Timmerman's  IrScope, contains the timing pattern,
                            the modulation frequency, and optionally a name (<code>note</code>) of one or many IR signals.</p>
                    </section>

                    <section>
                        <title>Text format</title>
                        <p>In the Internet, there are a lot of information in table-like formats, like
                            Excel, describing the IR commands of certain devices. IrScrutinizer has some
                            possibilities of importing these &mdash; after exporting them to a text format,
                            like tab separated values (tsv) or comma separated values.</p>

                        <section>
                            <title>Raw</title>
                            <p>The sub-pane allows for the parsing of text files separated by a certain
                                characters, like commas, semicolons, or tabs. The separating characters is
                                selected in the <code>Field separator</code> combo box. The column to be used as name is
                                entered in the <code>Name col.</code> combo box, while the data to be interpreted either as
                                raw data or CCF format, is entered  in the <code>Raw signal col.</code>. If the <code>... and
                                    subsequent columns</code> is selected, all subsequent columns are added to the data.</p>
                        </section>

                        <section>
                            <title>Raw, line-based</title>
                            <p>This pane tries to interpret a line-based file as a number of named IR
                                commands, using heuristics.</p>
                        </section>

                        <section>
                            <title>Parameterized</title>
                            <p>The sub-pane allows for the parsing of text files separated by a certain
                                characters, like commas, semicolons, or tabs. The separating characters is
                                selected in the <code>Field separator</code> combo box. The column to be used as name is
                                entered in the <code>Name col.</code> combo box, while protocol name and the parameters D,
                                S, and F are entered in their respective combo boxes. They are parsed in the
                                number base selected.</p>
                        </section>
                    </section>

                    <section>
                        <title>Wave</title>
                        <p>This pane imports and analyzes wave files, considered to represent IR
                            signals. The outcome of the analysis (sample frequency, sample size, the number
                            of channels, and in the case of two channels, the number of sample times the
                            left and right channels are in phase or anti-phase) is printed to the
                            console.</p>
                    </section>

                    <section>
                        <title>IrTrans</title>
                        <p>
                            <a href="http://www.irtrans.com">IrTrans</a>' configuration files (<code>.rem</code>) can be imported here.</p>
                    </section>
                </section>
            </section>

            <section>
                <title>The Export pane</title>
                <p>Using the export pane, export files can be generated,  allowing
                    other programs to use the computed results. Single signals (from the
                    <code>Scrutinize signal</code> pane), collections of signals (from the <code>Scrutinize remote</code>
                    pane), or rendered signals can be exported. Exports can be generated in a
                    number of different formats. Some (Girr and text) can contain both
                    the Pronto format and the "raw" format (timings in
                    microseconds, positive for pulses, negative for gaps), as well as other
                    formats. These formats, together with Wave and Pronto Classic, are
                    built-in in the program. However, it is possible to define new
                    export formats by extending a configuration file, see <a
                        href="#Adding+new+export+formats">Adding new export formats</a>.</p>
                <p>The file
                    names of the exports are either user selected from a file
                    selector, or, if <code>Automatic file names</code> has been selected,
                    automatically generated.</p>

                <p>The export is performed by pressing the one of the Export buttons. The <code>...</code>-marked
                    button allows for manually selecting the export directory. It is recommended to
                    create a new, empty directory for the exports. The just-created export file can
                    be immediately inspected by pressing the <code>Open last file</code>-button, which will open
                    it in the "standard way" of the operating system.
                    (Also available on the actions menu.)
                    (Girr exports become a special treatment in order not to invoke another
                    instance of the IrScrutinizer. They are copied to a temporary <code>.txt</code> file.)
                    The <code>Open</code> button
                    similarly opens the operating systems standard directory browser (Windows
                    Explorer, Konquistador, Nautilus,...) on the export directory.</p>

                    <p>Some export formats (presently Wave, mode2, and Lintronic)
                        export an <a href="Glossary.html#IrSequence">IR sequence</a> rather than an
                        <a href="Glossary.html#IrSignal">IR signal</a> (consisting of an intro sequence, an repetition sequence (to be
                        included 0 or more times), and an (most often empty) ending
                        sequence). When using these formats, the number of repetition sequences to include
                        can be selected.</p>
                    <p>The character set used for the export can be selected through <code>Options -> Export options -> Character set...</code>
                        Note however that this makes sense only for text based formats, including XML.</p>

                    <p>Some export formats have some more parameters, configured in sub panes.
                        These will be discussed in the context of the containing formats.</p>

                    <p>(Most of) the formats presently implemented will be described next, in alphabetical order.</p>

                    <section>
                        <title>AnyMote</title>

                        <p>Generates a configuration file for the <!-- Domain seems nonexistent a href="http://www.colortiger.com/"-->AnyMote IR remote control app
                            for Android and iOS.
                        </p>
                    </section>

                    <section>
                        <title>Arduino/Raw</title>
                        <p>Generates a complete C++ sketch for the <a href="Glossary.html#Arduino">Arduino</a>.
                            This uses one of the three Arduino Infrared libraries
                            <a href="https://github.com/z3t0/Arduino-IRremote">IRremote</a>,
                            <a href="https://github.com/cyborg5/IRLib">IRLib</a>,
                            and <a href="https://harctoolbox.org/Infrared4Arduino.html">Infrared4Arduino</a>.
                            As the name suggests, the <a href="Glossary.html#RawIrSignal">raw form of the signals</a> are used.
                        </p>
                    </section>

                    <section>
                        <title>Arduino/Infrared4Arduino</title>
                        <p>Generates a similar C++ sketch for the Arduino as in the raw case, but tries to
                            use the <a href="Glossary.html#ParametricIRSignal">parametric form</a> whenever possible, i.e.,
                            whenever the protocol is one that can be generated by the underlying infrared library. This version supports
                            <a href="https://harctoolbox.org/Infrared4Arduino.html">Infrared4Arduino</a> only.
                        </p>
                    </section>

                    <section>
                        <title>Arduino/IRremote</title>
                        <p>Like the preceding, but supports the IRremote library instead. (Currently, needs update to the current IRremote library.)</p>
                    </section>

                    <section>
                        <title>BracketedRaw</title>
                        <p>This export format generates an text file of the command(s) in the
                            <a href="https://www.harctoolbox.org/IrpTransmogrifier.html#BracketedRawFormat">bracketed raw text format</a>.</p>
                    </section>

                    <section>
                        <title>C</title>
                        <p>Generates a C code fragment consisting of declarations of the signals in raw- and CCF
                            format. Intended mostly as an example.</p>
                    </section>

                    <section>
                        <title>Girr</title>
                        <p>The program's native format, based on XML. Very flexible and
                            extensible. Can contain information like the raw format, CCF format, UEI
                            learned format, and the Global Caché sendir format. <a href="Girr.html">Official documentation site</a>.
                            There are some extra parameters that can be configured in subpanes, described next:</p>
                        <section>
                            <title>The Girr sub-pane</title>
                            <p>A style sheet can be selected to be linked in into the exported Girr
                                file. The type of style file (presently xslt and css) can also be selected.</p>

                            <p>
                                <code>Fat form raw</code> can be selected; this means that the raw signals are not given
                                as a text string of alternating positive and negative numbers, but the
                                individual flashes and gaps are enclosed into own XML elements. This can be
                                advantageous if generating XML mainly for the purpose of transforming to other formats.</p>
                        </section>
                    </section>

                    <section>
                        <title>HTML</title>
                        <p>The purpose with the HTML export is to generate a browse-able page, not something for other IR-programs to feed upon.</p>
                    </section>

                    <section>
                        <title>ICT</title>
                        <p>The ICT format, introduced by Kevin Timmerman's <a href="Glossary.html#IrScope">IrScope</a>,
                            contains the timing pattern, the modulation frequency, and optionally a
                            name (<code>note</code>) of one or many IR signals. Can be imported by IrScope and RemoteMaster.</p>
                    </section>

                    <section>
                        <title>irplus</title>
                        <p>Generates a configuration file for the Android ID remote <a href="https://irplus-remote.github.io/">irplus</a>.
                        </p>
                    </section>

                    <section>
                        <title>IrToy</title>
                        <p>A text version of the following</p>
                    </section>

                    <section>
                        <title>IrToy-bin</title>
                        <p>Generates a binary file "in IrToy format" that can be send to the IrToy using the  <em>program</em>
                            <code>irtoy[.exe]</code>, see <a href="http://dangerousprototypes.com/forum/viewtopic.php?f=29&amp;t=6678">this
                                thread</a>.
                        </p>
                    </section>

                    <section>
                        <title>IrTrans</title>
                        <p>This export format generates .rem files for the <a
                                href="Glossary.html#IrTrans">IrTrans</a> system, using its CCF format.</p>
                    </section>

                    <section>
                        <title>Lintronic</title>
                        <p>Simple text protocol for describing a single <a
                                href="Glossary.html#IrSeqeunce">IrSequence</a>.</p>
                    </section>

                    <section>
                        <title>Lirc Raw</title>
                        <p>The Lirc-exports are in <a href="Glossary.html#lircd.conf">
                                <code>lircd.conf</code>
                            </a>- raw format.
                            These use the raw Lirc format, except for a few well known protocol (presently NEC1 and RC5). They can be
                            concatenated together and used as the Lirc server data base. Can also be used with <a
                                href="https://winlirc.sourceforge.net/">WinLirc</a>.
                        </p>
                    </section>

                    <section>
                        <title>Lirc</title>
                        <p>Like <code>Lirc Raw</code>, but recognizes a large number of the protocols, for which lircd.conf files
                            in "cooked" (opposite of raw) are generated. For other protocols, it falls back to the raw form.
                        </p>
                    </section>

                    <section>
                        <title>mode2</title>
                        <p>A primitive debugging "signal format" used by Lirc, consisting on interleaved on- and off durations.</p>
                    </section>

                    <section>
                        <title>Pronto Classic</title>
                        <p>This format generates a <a href="Glossary.html#ccfFileFormat">CCF
                                configuration file</a> to be downloaded in a Pronto, or opened by a ProntoEdit program.</p>
                        <section>
                            <title>The Pronto Classic sub-pane</title>
                            <p>A Pronto Classic export consists of a <a
                                    href="Glossary.html#ccfFileFormat">CCF file</a> with the exported signals
                                associated to dummy buttons. The Pronto (Classic) model for which the export is
                                designed is entered in the combo box. Screen size of the Pronto is normally
                                inferred from the model, but can be changed here. The button size of the
                                generated buttons is also entered here.</p>
                        </section>
                    </section>

                    <section>
                        <title>Pronto Hex Oneshot</title>
                        <p>This export format takes a single signal, makes a sequence of it consisting of the intro sequence,
                            an arbitrary number of copies of the repeat sequence, and the (in general empty) ending sequence.
                            This is packed into a Pronto Hex format, having the said sequence as its intro, and empty repeat.</p>
                    </section>

                    <section>
                        <title>Spreadsheet</title>
                        <p>Simple <a href="Glossary.html">tab separated value</a> export format for
                            importing in a spreadsheet program. This format is mainly meant to
                            demonstrate a simple format in XSLT, more than a practically useful format.</p>
                    </section>

                    <section>
                        <title>Text</title>
                        <p>The text format is essentially the Girr format stripped of the XML markup information.
                        </p>
                    </section>
                    <section>
                        <title>TV-B-Gone</title>
                        <p>Variant of the C format, this format generates C code for the  <a
                                href="https://en.wikipedia.org/wiki/TV-B-Gone">TV-B-Gone</a>.</p>
                    </section>

                    <section>
                        <title>Wave</title>
                        <p><!--See the article <a href="wave.html">Wave files for IR sequences</a>.-->
                            IR sequences encoded as wave audio files.
                        </p>
                        <section>
                            <title>The Wave sub-pane</title>
                            <p>Parameters for the generated Wave export (except for the number of repeats)
                                can be selected here.
                                <!-- For their meaning, see the article <a href="wave.html">Wave files for IR sequences</a>.-->
                            </p>
                        </section>
                    </section>
            </section>

            <section>
                <title>The "Hardware" pane</title>
                <p>The sub-panes of this pane allows for the selection and configuration
                    of the deployed IR sending/capturing hardware.</p>

                <p>A opposed to versions earlier than 2.4.0, there is exactly one <em>selected device</em>,
                    corresponding to the the selected sub-pane of the <code>Hardware</code> pane.
                    This device is, if capable, used for both sending and capturing.
                    The selected device may be opened or not. An opened device may be selected or not. There may be more than opened device.
                    The hardware can also be selected from the tool bar, Options -&gt;
                    Capturing hardware.</p>

                <p>Note that by e.g. selecting non-existing hardware or such, there is a
                    possibility encounter long delays, or even to "hang" the program.</p>

                <p>After configuring and opening the capturing hardware, the <code>Test</code> button can be
                    used for testing the configuration without switching pane.</p>
                <p>The currently selected ports etc. are stored in the properties, thereby
                    remembered between sessions. So, for future sessions, only opening the
                    preferred device is necessary. </p>

                <section>
                    <title>Capturing parameters</title>
                    <p>Capturing an IrSequence is governed by the parameters <code>beginTimeout</code>, <code>captureMaxSize</code>, <code>endingTimeout</code>,
                        which can be accessed in the <code>Options -> Timeouts</code> submenu.
                        <code>beginTimeout</code> and <code>endingTimeout</code> bothe use the unit milli seconds.
                        Unfortunately, not all hardware respect these parameters.
                    </p>
                    <dl>
                        <dt>beginTimeout</dt>
                        <dd>When capturing starts, this determines how long the capturer is waiting for the first flash. Default is 3000ms.</dd>
                        <dt>captureMaxSize</dt>
                        <dd>This is the maximal duration the capturing hardware will accept. Default is 1000.</dd>
                        <dt>endingTimeout</dt>
                        <dd>The silence period required at the end of an IrSequence. Default is 300ms.</dd>
                    </dl>
                </section>

                <section>
                    <title>The "Global Caché" pane.</title>
                    <p>IrScrutinizer automatically detects alive Global Caché units in the local area
                        network, using the <a href="Glossary.html#AMXBeacon">AMX Beacon</a>. However, this may take
                        up to 60 seconds, and is not implemented in very old firmware. Using the <code>Add</code>
                        button, the IP address/name of older units can be entered manually.</p>

                    <p>The user can select one of the thus available Global Caché units, together with
                        IR-module and IR-port (see <a
                            href="https://www.globalcache.com/files/docs/API-GC-100.pdf">the
                            Global Caché API specification</a> for the exact meaning of these
                        terms).</p>

                    <p>For this to work, port 9131/udp must be open in a used firewall</p>

                    <p>The <code>Browse</code> button points the user's web browser to the selected unit.</p>

                    <p>The reported type and firmware version serves to verify that the
                        communication is working.</p>

                    <p>
                        <code>Stop IR</code>-Button allows the interruption of ongoing transmission,
                        possibly initiated from another source.</p>
                </section>
	  <!--section>
	    <title>The "Lirc" pane</title>
<p>To be fully usable for IrScrutinizer, the Lirc server has to be extended to be
able to cope with CCF signal not residing in the local data base, but sent from
a client like IrScrutinizer, thus mimicking the function of e.g. a
Global Caché. The needed modification ("patch") is in detail described <a
    href="https://www.harctoolbox.org/lirc_ccf.xml">here</a>, sources <a href="https://sourceforge.net/u/bengtmartensson/lirc/ci/ccf/tree/">here</a>.
    However, even without
this patch, the configuration page can be used to send the predefined commands
(i.e. residing it its data base <code>lirc.conf</code>). It can be considered
as a GUI version of
the <a href="https://www.lirc.org/html/irsend.html"><code>irsend</code>
command</a>.</p>
<p>The Lirc server needs to be started in network listening mode with
the <code>-l</code> or <code>- -listen</code> option. Default TCP port is
8765.</p>

<p>When selecting the Lirc sub-pane, the therein selected Lircd is inquired for its version
    and its remotes. If successful, the <code>Remote</code> and
<code>Command</code> combo boxes should now be enabled. After selecting a remote and one
    of its command, it can be sent to the Lirc server by pressing the <code>Send</code> button.</p>


<p>After entering another IP-Address or name, and port (stay with 8765 unless a reason
to do otherwise), pressing the <code>Reload</code> button will update the Lirc server with its known remotes and their commands
    (however, not the version).
    </p>

    <p>Transmitting other signals to  Lirc works only if the Lirc server has the above described patch applied.</p>

	  </section-->
                <section>
                    <title>/dev/lirc (Linux only)</title>
                    <p>On Linux, so-called mode-2 capable IR hardware using the <code>/dev/lirc</code> device,
                        can be accessed directly, both for sending and receiving.
                        When connected, and in some cases after loading suitable drivers, a device file <code>/dev/lirc</code>
                        <em>n</em>
                        (for <em>n</em> = 0, 1, 2,...) will be created. Of course, this must be read- and/or writeable by the current user;
                        in e.g. Fedora this is the case for member of the group <code>lirc</code>.</p>

                    <p>After opening the device, its properties will be listed.
                        See the man page <a href="https://lirc.org/html/lirc.html">lirc(4)</a> for an explanation.</p>
                    <p>Although not a priori impossible, to my knowledge no <code>/dev/lirc</code> device  implements frequency measurement.</p>
                </section>
                <section>
                    <title>The "Audio Port" Pane</title>
                    <p>
                        As additional "hardware sending device", IrScrutinizer can generate wave files, that can be
                        used to control IR-LEDs. This technique has been described many times in the
                        Internet the last few years, see for example <a
                            href="https://lirc.org/html/audio.html">this page</a> within the Lirc
                        project. The hardware consists of a pair of anti-parallel IR-LEDs, preferably
                        in series with a resistor. Theoretically, this corresponds to a full wave
                        rectification of a sine wave. Taking advantage of the fact that the LEDs are
                        conducting only for a the time when the forward voltage exceeds a certain
                        threshold, it is easy to see that this will generate an on/off signal with the
                        double frequency of the original sine wave. (See the first picture in the Lirc
                        article for a picture.) Thus, a IR carrier of 38kHz (which is fairly typical)
                        can be generated through a 19kHz audio signal, which is (as opposed to 38kHz)
                        within the realm of medium quality sound equipment, for example using mobile
                        devices.
                    </p>
                    <p>It can only send, not receive/capture.</p>
                    <p>IrScrutinizer can generate these audio signals as wave files, which can be
                        exported from the export pane, or sent to the local computers sound card. There
                        are some settings available: Sample frequency (44100, 48000, 96000, 192000Hz),
                        sample size (8 or 16 bits) can be selected. Also "stereo" files can be
                        generated by selecting the number of channels to be 2. The use of this feature
                        is somewhat limited: it just generates another channel in opposite phase to the
                        first one, for hooking up the IR LEDs to the difference signal between the
                        left and the right channel. This will buy you double amplitude (6 dB) at the
                        cost of doubling the file sizes. If the possibility exists, it is better to
                        turn up the volume instead.
                    </p>
                  <!--p>Data can be generated in little-endian (default) or big-endian format. This
                  applies only to 16-bit sample sizes.</p>

                  <p>As an experimental option, the carrier frequency division as described above
                  can be turned off (the <code>Divide carrier" check-box). This is only meaningful for
                  sample frequencies of 96kHz and higher, and for "audio equipment" able to
                  reproduce frequencies like 36kHz and above.</p-->
                    <p>Most of "our" IR sequences ends with a period of silence almost for the half
                        of the total duration. By selecting the <code>Omit trailing gap</code>-option, this
                        trailing gap is left out of the generated data &ndash; it is just silence
                        anyhow. This is probably a good choice (almost) always.</p>

                  <!--p>Finally, the wave form on the modulation signal can be selected to either
                  sine or square wave. For practical usage, my experiments shown no real
                  performance difference.</p-->

                        <p>Note that when listening to music, higher sample rates, wider sample sizes,
                            and more channels sound better (in general). However, generating "audio" for
                            IR-LEDs is a completely different use case. The recommended settings are:
                            48000kHz, 8bit, 1 channel, omit trailing gap.</p>

                  <!--p>Note that the settings on this pane also take effect when exporting wave
                  files from the export pane.</p>
                  <p>By pressing "Get Line" a "line" to the audio system on the local computer is
                  allocated. This is actually superfluous, since the send-functions make this
                  automatically anyhow. It will possibly be removed in future versions.</p-->
              </section>
	  <!--section>
	    <title>The "IRTrans" pane</title>
<p>
The configuration of IRTrans is similar to Lirc, so it will be described
more briefly.</p>
<p>Enter IP name or -address and select an IR port (default <code>intern</code>). If the
Ethernet IRTrans contains an "IR Database" (which is a slightly misleading term
for an internal flash memory, that can be filled by the user), its commands can
be sent from this pane. By pressing the <code>Read</code> button, the known remotes and
commands are loaded, and the version of the IRTrans displayed. The selected
command can now be sent by the <code>Send</code> button. (However, this
functionality is otherwise not used by IrScrutinizer.)</p>

<p>The IRTrans
module is then accessed using the UDP text mode.</p>


	</section-->
<!--section>
<title>The "IrToy" Pane</title>
<p>Using this pane, the IrToy (version 2) can be used to transmit IR signals.
    The firmware versions 2.0, 2.1, 2.2, as well as the in-official "2.4" work.
    (These are identified by a version string like <code>V220</code> etc.)
    However, only version 2.2 has been exhaustively tested.</p>

    <p>The ending timeout for receive is 1.7 seconds, and cannot be changed. This is not optimal for most IR signal capture use cases.</p>
</section-->

              <section>
                  <title>The "Girs Client" (previously "Arduino") Pane</title>
                  <p>Using this pane, a <a href="https://www.harctoolbox.org/Girs.html">Girs server</a>
                      (e.g. running on an Arduino equipped with a suitable hardware) can be used to
                      transmit and capture IR signals. The server can be connected to a serial port,
                      or through Ethernet to the local area network, connected by a TCP socket. For the Arduino, the <a href="https://github.com/bengtmartensson/AGirs">
                          sketch <code>GirsLite</code> (or <code>Girs</code>)</a>  can be
                      used.</p>

                  <p>The serial port may sometimes be finicky. Sometimes disconnecting and
                      reconnecting the device may help.</p>

                  <p>To use the device connected to a real or virtual serial port, select the port in
                      the combo box, pressing <code>Refresh</code> if necessary. <code>Open</code> the port
                      thereafter. The opening of LAN connected device is simliar.</p>

                  <p>Normally, the Girs server uses the Girs <code>analyze</code> command to capture IR signals,
                      which is normally deploying a non-demodulating sensor, providing a frequency measurement.
                      If this is not desired (for example when the non-demodulating sensor is missing),
                      selecting <code>Use receive for capture</code>, instead the <code>receive</code> command will be used,
                      which normally uses a demodulating sensor. In this case, no frequency measurement will be produced,
                      and instead the fallback frequency (selectable/changeable as <code>Options -> Fallback frequency</code>) will be used.</p>
              </section>

              <section>
                  <title>The "CommandFusion" Pane</title>
                  <p>Using this pane, the CommandFusion learner can be used to transmit and capture IR signals.</p>
                  <p>After connecting the Command Fusion learner to a USB  port, select the the actual (virtual) serial port in
                      the combo box, pressing <code>Refresh</code> if necessary. <code>Open</code> the port
                      thereafter.</p>
              </section>

              <section>
                  <title>The "IrWidget" pane</title>
                  <p>Using this pane, the IrWidget can be used to capture IR signals.</p>
                  <p>After connecting the IrWidget to a USB  port, select the the actual (virtual) serial port in
                      the combo box, pressing <code>Refresh</code> if necessary. <code>Open</code> the port
                      thereafter.
                      If using the original Kevin Timmerman widget, for example built and sold by Tommy Tylor, the option <code>lower DTR abd RTS on opening</code>
                  must be selected.</p>
              </section>
            </section>

            <section>
                <title>Key bindings and accelerators</title>
                <p>The GUI contains a number of key bindings and accelerators. These can be found in menus and in the text of GUI elements.
                A more substantial description is planned, but not yet written.</p>
            </section>
        </section>
        <section>
            <title>Command line arguments</title>
            <p>Normal usage is just to double click on the jar-file, or possibly on
                some wrapper invoking that jar file. However, there are some command
                line arguments that can be useful either if invoking from the command
                line, or in writing wrappers, or when configuring custom commands in
                Windows. </p>

            <p>Girr files given as command line argument will be imported to the <code>parametric remote</code> table.
                Accordingly, if the system is configured to associate <code>*.girr</code> with IrScrutinizer,
                these files can be opened by double clicking them.
            </p>

            <p>
                The options <code>--version</code> and <code>--help</code> work as they are
                expected to work in the <a
                    href="https://www.gnu.org/prep/standards/html_node/Command_002dLine-Interfaces.html#Command_002dLine-Interfaces">GNU
                    coding standards for command line interfaces</a>. Use
                the <code>--help</code>-command to see the complete list of command line parameters. The <code>-v/--verbose</code>
                option set the verbose flag (which can also be accessed under the GUI as <code>Options -> verbose</code>,
                causing commands like sending to IR
                hardware printing some messages in the console.</p>

            <p>Using the option <code>--properties</code> (or <code>-p</code>), an alternative property file can be used.
                If installing more than one version of the program, this is recommended practice.</p>

            <p>The option <code>--nuke-properties</code> makes the program delete the property file, and exit immediately.</p>

            <p>The option <code>--scaling</code> (or <code>-s</code>, <code>--scale</code>)
                set the scaling of the GUI. Accepted values and their semantics depend on the JVM used.</p>

            <p>IrpTransmogrifier as well as <a href="HarcHardware.html">HarcHardware</a> as command line program can be invoked with the AppImage installation by
                calling it using the name <code>irptransmogrifier</code> or <code>harchardware</code> (through copying or linking).</p>

            <p>The MacOS App does not support calling IrpTransmogrifier or HarcHardware; install the generic binary version if needed.</p>

            <p>The program delivers well defined and sensible exit codes, listed
                <a href="https://github.com/bengtmartensson/IrpTransmogrifier/blob/master/src/main/java/org/harctoolbox/irp/IrpUtils.java">in the code</a>.</p>

            <p>For automating tasks, or for integrating in build processes or Makefiles or
                the like, it
                is probably a better idea to use IrpTransmogrifier instead, which has a
                reasonably complete <a href="IrpTransmogrifier.html#Usage+of+the+program+from+the+command+line">command line interface</a>.</p>
        </section>

        <section>
            <title>Adding new export formats</title>
            <p>Only a few of the many export formats are  defined in the main Java code (<code>Girr</code>, <code>Text</code>, <code>Pronto Classic</code> and <code>Wave</code>),
                the rest are defined in files in the directory  <code>exportformats.d</code>,
                located in the root of the install directory. By adding a file here,
                the user can simply add his/her own export formats according to own
                needs. An export format consists of a number of properties, together
                with a small "program" written in the transformation language <a href="Glossary.html#XSLT">XSLT</a>,
                for transforming a Girr-XML-tree to the desired text format.</p>

            <p>The rest of this section documents the format of these files, and is
                supposed to be read only when needed. Fundamental knowledge of XML and
                XSLT transformations are assumed.</p>

            <section>
                <title>Format of the files in <code>exportformats.d</code></title>
                <p>The file is an XML file supposed to be a valid instance of the XML Schema
                    <a href="https://www.harctoolbox.org/schemas/exportformats.xsd">
                        <code>exportformats.xsd</code>
                    </a>, although it is read without validation.
                    The semantics is believed to be essentially self explaining, or clear from the
                    examples already in there. An export format is
                    packed in an element of type <code>exportformats:exportformat</code>. It contains
                    the following attributes:</p>
                <dl>
                    <dt>
                        <code>name</code>
                    </dt>
                    <dd>Text string used for identifying the format.</dd>
                    <dt>
                        <code>extension</code>
                    </dt>
                    <dd>Text string denoting preferred file extension (not including period)
                        of generated files.</dd>
                    <dt>
                        <code>multiSignal</code>
                    </dt>
                    <dd>Boolean (value: <code>true</code> and <code>false</code>). Denotes if
                        several signals can be represented in one export, or only one.</dd>
                    <dt>
                        <code>simpleSequence</code>
                    </dt>
                    <dd>Boolean, (values <code>true</code> of
                        <code>false</code>). If true, the export really describes an <a
                            href="Glossary.html#IrSequence">sequence</a> rather than am <a
                            href="Glossary.html#IrSignal">signal</a> (with intro-, repeat- , and
                        ending-sequences), therefore the user must explicitly state a particular number
                        of repetitions for an export.</dd>
                </dl>
                <p>The element <code>exportformats:exportformat</code>contains as a child element the XSLT
                    transformation, which is an element of type
                    <code>xsl:stylesheet</code>, with attributes as in the examples.</p>
                <p>The task of the transformaton is to transform a Girr XML DOM tree in the <a
                        href="Girr.html#Fat+Format">"fat" format</a>, with
                    <code>remotes</code> as
                    root element, into the desired text format. It may be advisable to use
                    the already present formats as guide.</p>
                <p>
                    For testing and developing new export formats in this for, the <code>main</code> routine of
                    the class <code>org.harctoolbox.irscrutinizer.exporter.DynamicRemoteSetExportFormatMain</code>
                    may be used. It can be used to transform a Girr file from the command line.
                </p>

                <p>After editing or adding export format files, they can be reloaded either by re-starting the
                    program, or by selecting <code>Options</code> -> <code>Export formats database</code> -> <code>Reload</code>.</p>
            </section>
        </section>

        <section>
            <title>Properties</title>
            <p>Under Windows, the persistent properties are stored in
                <code><![CDATA[%LOCALAPPDATA%\IrScrutinizer\IrScrutinizer.properties.xml]]></code>
                (typically <code>%HOME%\AppData\Local\IrScrutinizer\IrScrutinizer.properties.xml</code>).
                Using other operating
                systems, it is stored according to the <a href="https://specifications.freedesktop.org/basedir-spec/latest/index.html">FreeDesktop specification</a>.
                Per default, this is <code>$HOME/.config/IrScrutinizer/properties.xml</code>. It is
                not deleted by  un-install or by an update of the program.

                If weird problems appear, for example after an update, try
                deleting this file, from the GUI <code>File -> Set properties to default</code>.
                There is also a command line option <code>--nuke-properties</code> that can be used to
                conveniently delete the present property file, without remembering its exact path.
            </p>
        </section>

        <section>
            <title>Questions and Answers</title>
            <section>
                <title>How do I verify the integrity of my downloads?</title>
                <p>
                    On the official download site, the checksums (using the <a href="https://en.wikipedia.org/wiki/MD5">MD5</a>,
                    <a href="https://en.wikipedia.org/wiki/SHA-1">SHA-1</a>, and <a href="https://en.wikipedia.org/wiki/SHA-2">SHA-512</a> algorithms)
                    are available in the files <code>checksums.md5</code>, <code>checksums.sha1</code>, and <code>checksums.sha512</code>.
                    With appropriate software, these can be used for validating the downloaded files.</p>

                <p>To prevent from tampering of <em>both</em> the program files <em>and</em> the checksum files,
                    the checksum files are also PGP signed with the cryptograph key
                    for <code>Bengt Martensson &lt;barf@bengt-martensson.de&gt;</code>,  finger print <code> 5F492CB76BEB2E6B1CAA63A3EE1F17D4ECF8AF9C</code>.
                    The full key can be downloaded <a href="https://harctoolbox.org/downloads/harctoolbox.gpg">here</a>,
                    or found in the program as <code>Tools -> Author&apos;s Public PGP key</code>.
                    (For practical reasons, the shapshot releases are, in general, not signed.)
                </p>
                <p>How to check these checksums and signatures differ between different programs and operating systems,
                    and is therefore not described here. However, searching on the Internet will yield many descriptions.</p>
            </section>

            <section>
                <title>My virus program says that your program contains virus or malware.</title>
                <p>My programs do not come with virus.
                    Downloading from un-official sites are discouraged, in particular if they do not keep the signed checksum files.
                    (Most likely, they do not.)</p>
                <p>First check the integrity of the downloaded files as described in the previous question.
                    Assuming that the problem remains, this is a problem with your virus program,
                    and not with the present program, and it should be handled as such.
                    If it is a release version, please inform the author of the virus program, and/or create a white list.
                    What you do not need to do, is to tell me, or "the world". Remember, it is a problem with the virus program,
                    not with my software.
                </p>
            </section>

            <section>
                <title>Why have RemoteMaster Import and Export been removed?</title>
                <p>The <a href="Glossary.html#RemoteMaster">RemoteMaster</a> export and import found in earlier versions (up to 2.3.0) of this program have been removed.
                    The reason is that the current version of that program contains elaborate facilities for the import and export of Girr files
                    &mdash; the native format for IrScrutinizer.
                    As opposed to the previous import and export of the current program,
                    they contain elaborate rules for transforming between protocols and the <a href="Glossary.html#Executor">JP1 executors</a>.</p>
            </section>

            <section>
                <title>Can I run more than one instance simultaneously?</title>
                <p>
                    Yes, you can fire up several instances, for example, one for sending
                    and another for receiving the sent signals.
                    The only possible problem is that the properties are read from/written to the same file, so the instance
                    that ends last will overwrite the properties of the first one.
                    This does not have to be a problem. However,
                    if this is an issue, you can start the program with the <code>--properties</code>
                    <em>filename</em>, pointing to an alternative properties file.
                    With Windows, you can duplicate the icon, and edit the command line on one of those.
                </p>
            </section>

            <section>
                <title>I miss DecodeIR!</title>
                <p>Support for DecodeIR was <em>removed</em>, not just hidden and deprecated,
                    because keeping it would increase maintenance and installation effort substantially.
                    For accessing DecodeIR, it is recommended to install version 1.4.3
                    (which is the final release with DecodeIR) in parallel to the current one,
                    see the previous answer for details.</p>
            </section>

            <section>
                <title>Firewall issues?</title>
                <p>Except for the usual HTTP(S) ports, the program uses some TCP and UDP ports for communicating with some of the supported hardware.
                    These are:
                </p>
                <ul>
                    <li>For GlobalCache this is TCP port 4998. Its discovery beacon uses UDP port 9131.</li>
                    <li>Lirc uses a TCP port, per default 8765.</li>
                    <!--li>IrTrans uses a UDP port, per default 21000.</li-->
                    <li>AGirs on an ethernet connected board uses a TCP port, per default 33333.</li>
                </ul>
                <!--p>TODO: describe configuration of firewall/packet filter on Windows and others. (Help welcome!)</p-->
            </section>

            <section>
                <title>Does IrScrutinizer completely replaces IrMaster?</title>
                <p>Almost. Using <a href='IrMaster.html#The+"IR+Protocols"+pane'>MakeHex as
                        renderer</a> (or more correctly, its Java version) is not
                    implemented. (The practical usage of this feature is probably <em>very</em>
                    limited, and IrMaster is still available, should it ever be needed.) The
                    <a href='IrMaster.html#The+"War+Dialer"+pane'>"war dialer"</a> is also not
                    implemented, but see next question. For the wave export, some rarely used
                    options (the possibility to
                    select big-endian format (for 16-bit samples), the possibility <em>not</em> to
                    half the carrier frequency, and the possibility to select sine (instead of
                    square) for modulation) have been removed. Finally, there is some
                    stuff that simply works differently, like the export function.</p>
            </section>
            <section>
                <title>How do I emulate the war dialer of IrMaster?</title>
                <p>
                    Use <code>Scrutinize remote -> Parametric Remote</code>. Fill in the table with signals to
                    be tested, either using the pop-up button (right mouse in the table) Advanced ->
                    Add missing F's, or from the Render pane, using suitable parameter
                    intervals (see <a href="#The+%22Render%22+pane">this</a>), and transfer them using the <code>To parametric remote</code> button. Then
                    test the candidate signals one at a time by transmit-ting them, using suitable
                    sending hardware.
                    The comment field can be used for note taking.</p>

                    <p>A "war dialer" like in IrMaster may be implemented in a later version.
                    </p>
            </section>
            <section>
                <title>Can I use this program for
                    conveniently controlling my favorite IR controlled device from the sofa?</title>
                <p>No, the program is not meant for that. While you definitely can assemble a
                    "remote" on the <code>scrutinize remote</code> panel, and transmit the different commands
                    with mouse commands (appropriate hardware assumed), the program is intended for
                    developing codes for other deployment solutions.
                </p>
                <p>Check out <a href="https://github.com/bengtmartensson/JGirs">JGirs</a>,
                    which is an IR server implementing the <a href="Girs.html">Girs</a> specification.
                    It can be considered as "IrScrutinizer as a server".
                </p>
            </section>
            <section>
                <title>The pane interface sucks.</title>
                <p>Yes.  There are several use cases when the
                    user would like to see several "panes" simultaneously. Also, it should be
                    possible to have several windows of the same sort (like the <code>scrutinize
                        signal</code>) simultaneously. Replacing the top level panes with something
                    "Eclipse-like"
                    (sub-windows that can be rearranged, resized, moved, iconized) is on my
                    wish list.
                </p>
            </section>

            <section>
                <title>What about the "fishy" icon?</title>
                <p>It is a <a href="https://hitchhikers.fandom.com/wiki/Babel_Fish">Babel fish</a>,
                    as found in <a href="https://en.wikipedia.org/wiki/The_Hitchhiker%27s_Guide_to_the_Galaxy">The Hitchhiker's Guide to the Galaxy</a>,
                    having the property, that
                    "... if you stick one in your ear, you can instantly understand anything said to you in any form of language".
                    This symbolizes the program's ability to "understand" (read and write) a large number of different IR formats.
                </p>
            </section>

            <section>
                <title>I did something funny, and now the program does not startup, with no
                    visible error messages.</title>
                <p>Try deleting the <a href="#Properties">properties file</a>.
                    (Note the command line option <code>--nuke-properties</code> which will do exactly that,
                    without having to manually find the file or its name.) If that does not help, try
                    starting the program from the command line, which may leave hopefully
                    understandable error message on the console.</p>
            </section>

            <section>
                <title>(Windows) When I double click on the IrScrutinizer symbol,
                    instead of the program starting, WinRar (or some other program) comes
                    up.</title>
                <p>The program that comes up has "stolen" the file association of
                    files with the extension <code>.jar</code>. Restore it. (Allegedly, WinRar can
                    gracefully "unsteal" file associations.)</p>
            </section>

            <section>
                <title>(Windows) Why is the program so slow at start-up?</title>
                <p>Normal start up time is a few seconds, about the same time as it
                    takes for (e.g.) a web browser to start. If it takes considerably
                    longer than that, the problem is almost surely hardware related, i.e., the
                    program looks for possibly non-existent hardware. To fix this, make
                    sure that the selected capture- and sending devices (these are save
                    between sessions!) do not correspond to something non-existent. The
                    most "innocent" settings are: capture: Lirc mode 2, and sending:
                    Audio port. These are also the defaults when the program starts up for
                    the first time. Also, consider deleting possible
                    "junk devices" in the Windows device manager under <code>COM &amp; LPT</code>
                    (unused Bluetooth-to-serial ports etc.). </p>
            </section>

            <section>
                <title>(Linux) I get error messages that lock files cannot be
                    created, and then the serial hardware do not
                    work.</title>
                <p>
                    <em>This answer needs updating.</em>
                </p>
            <p>When starting IrScrutinizer, or by pressing the <code>Refresh</code> button,
                    error messages occur like</p>
                <p>
                    <code>
                        check_group_uucp(): error testing lock file creation Error
                        details:Permission deniedcheck_lock_status: No permission to create
                        lock file.
                    </code>
                </p>
                <p>
                    (and a number of them...)
                    The problem is that the library <code>rxtx</code> (like some other program
                    accessing a serial interface) wants to create a lock file in a
                    particular directory. This is/was traditionally
                    <code>/var/lock</code>, which is often a symbolic link to
                    <code>/var/run/lock</code>. This directory is normally writable by
                    members of the group <code>lock</code>. So your user-account should probably
                    be a member of that group. (How to perform this is different in
                    different Linux distributions.) The rxtx library delivered with
                    IrScrutinizer expects the lock directory to be
                    <code>/var/lock</code>. However, recently some Linux-distributions
                    (e.g. Fedora 20), instead are using <code>/var/lock/lockdev</code> as
                    its lock directory (while <code>/var/lock</code> still is a link to
                    <code>/var/run/lock</code>. To solve this, I recommend, if possible,
                    installing rxtx provided by the Linux distribution used, i.e. not
                    using the one with IrScrutinizer. For example, on Fedora, the command
                    is
                </p>
                <source>
                    sudo dnf install rxtx
                </source>
                <p>which installs the library in <code>/usr/lib/rxtx</code> or
                    <code>/usr/lib64/rxtx</code>, depending on the operating system. (Other distributions uses other
                    commands, for example <code>apt-get</code> on Debian-like systems.)
                    Finally, the correct installation directory of the library
                    (<code>librxtxSerial-2.2pre1.so</code>) has to be given to the JVM
                    running IrScrutinizer. For this, see the wrapper
                    <code>irscrutinizer.sh</code> and the comments therein, and make the
                    necessary adaptations.
                </p>
            </section>
            <section>
                <title>What is on the splash screen?</title>
                <p>From left to right, a <a href="https://www.globalcache.com/products/itachflex/">Global Caché iTach Flex</a>,
                    an <a href="http://www.seeedstudio.com/depot/usb-infrared-toy-v2-p-831.html?cPath=174">IrToy</a>,
                    and a low-cost clone of an <a href="https://arduino.cc/en/Main/ArduinoBoardNano">Arduino Nano</a>,
                    the latter equipped with a non-demodulating IR detector (TSMP4138) for capturing and an IR diode (SFH415) for sending.
                    These are all hardware which work well with IrScrutinizer, both for sending and capturing.</p>
            </section>
            <section>
                <title>Why do I get multiple "Really exit?" confirmation questions when exiting?</title>
                <p>If the "Scrutinize Remote" parametric table is non-empty and not saved,
                    the user is asked to acknowledge the exit, since he/she may otherwise loose carefully entered data.
                    Exactly the same thing goes for the raw table. So, it is not "multiple", it may be at most two;
                    they are not identical (but very similar). There is also a "Do not ask this again" checkbox.</p>
            </section>
            <!--section>
                <title>Do you solicit or accept donations?</title>
                <p>No.</p>
            </section-->
        </section>
        <section id="building-from-sources">
            <title>Appendix. Building from sources</title>
            <p>"IrScrutinizer" is one subproject within <a href="https://harctoolbox.org">harctoolbox.org</a>.
            It depends on several other subprojects within harctoolbox. The repository <a href="https://github.com/bengtmartensson/IrScrutinizer">IrScrutinizer</a>
        consists
                of this subproject.</p>

            <p>The released versions are found on the <a href="https://github.com/bengtmartensson/IrScrutinizer/releases">download page</a>.
                The development sources are maintained on <a href="https://github.com/bengtmartensson/IrScrutinizer">my GitHub repository</a>.
                Forking and pull requests are welcome!</p>

            <p>I go to great lengths ensuring that the program runs equally well on all supported platforms.
                I do not care too much that all aspects of the build runs equally well on all platforms.
                I build with Linux (Fedora), the continuous integration build runs on GitHub Actions (deploying Ubuntu).
                Other platforms are treated step-motherly.</p>
            <section>
                <title>Dependencies</title>
                <p>As any program of substantial size, IrScrutinizer uses a number of third-party components.
                    All of these are also free software, carrying compatible licenses.
                    The dependent packages need to be installed also in
                    the host-local Maven repository in order for the build to work.
                    In some cases (basically the ones with a version not ending with <code>-SNAPSHOT</code>), the packages
                    are uploaded to <a href="https://mvnrepository.com/repos/central">the Maven central repository</a>,
                    and will be automatically downloaded to the local host by a Maven invocation.
                </p>

                <p>There are some scripts to aid downloading and building, described next. It is assumed that
                    <a href="https://git-scm.com/">git</a> and <a href="https://maven.apache.org/">Maven</a>
                    are installed and available as commands <code>git</code> and <code>mvn</code> respectively.</p>
                <p>Of course, it is also possible to manually download or clone these packages
                    from <a href="https://github.com/bengtmartensson?tab=repositories">my Github repositories</a>,
                    then build and install them locally by <code>mvn install</code>.</p>

                <section>
                    <title>IrpTransmogrifier, Girr, HarcHardware, Jirc</title>
                    <p>These are all Java packages that are required to build IrScrutinizer. HarcHardware requires
                        <a href="https://github.com/NeuronRobotics/nrjavaserial">nrjavaserial</a>.
                        They can be downloaded and built by the script <code>common/scripts/build-harctoolbox-project.sh</code>,
                        using an argument of
                        <code>IrpTransmogrifier</code>,
                        <code>Girr</code>,
                        <code>HarcHardwar</code>, or
                        <code>Jirc</code>.
                        See the file <code>.github/workflows/maven.yml</code> for the complete commands.
                    </p>
                </section>

                <section>
                    <title>DevSlashLirc</title>
                    <p>This library is used to access <code>/dev/lirc</code>-hardware. It is used by the Linux version only.
                        It is a Java JNI library, written in Java and C++. It is written by myself,
                        and available <a href="https://github.com/bengtmartensson/DevSlashLirc">here</a>.
                    </p>
                    <p>The subdirectories <code>native/Linux-amd64</code>,
                        <code>native/Linux-i386</code>, and
                        <code>native/Linux-arm</code> contain compiled versions for the x86_64, x86_32, and ARM processors respectively.</p>

                    <p>The package can be downloaded, and the Java part built, by the script
                        <code>common/scripts/build-harctoolbox-project.sh</code> using the argument <code>DevSlashLirc</code>
                        (see <code>.travis.yml</code> for an example).</p>
                </section>

                <section>
                    <title>nrjavaserial</title>
                    <p>This is a fork of the legacy <a href="http://rxtx.qbang.org/wiki/index.php/Main_Page">RXTX</a> library for serial communication with Java.
                    Version 5.2.1 is currently used. </p>
                </section>

                <section>
                    <title>JCommander</title>
                    <p>Normally, this component is downloaded and installed automatically by Maven.</p>
                </section>

                <section>
                    <title>Tonto</title>
                    <p>
                        <a href="Glossary.html#Tonto">Tonto</a> can be downloaded and installed by the script <code>common/scripts/build-tonto.sh</code>.
                        It requires the <a href="https://ant.apache.org/">Apache ant</a> build system to be installed as the command <code>ant</code>.
                        Note that the shared library <code>libjnijcomm</code>,
                        which is required by the Tonto program for communicating with a Pronto remote through a serial interface,
                        is not required for use with IrScrutinizer, and can therefore be left out.
                        Using the option <code>-n</code> to the script (see <code>.travis.yml</code> for an example),
                        the script will not try to build and install the shared library.</p>
                </section>
            </section>
            <section>
                <title>Building</title>
                <p>The <a href="https://maven.apache.org/index.html">Maven</a> "software
                    project management and comprehension tool" is used as building system.
                    Modern IDEs like Netbeans and Eclips integrate Maven, so build etc can be initiated from the IDE.
                    Of course, the shell command <code>mvn install</code> can also be used. It creates some artifacts which can
                    be used to run IrScrutinizer in the <code>IrScrutinizer/target</code> directory.</p>

                <p>Two additional shell tools are needed. These are:</p>
                <ul>
                    <li>The <code>unix2dos</code> and <code>dos2unix</code> utilities, typically in the <code>dos2unix</code> package.</li>
                    <li>The <code>icotool</code> utility, typically in the <code>icoutils</code> package.</li>
                </ul>
            </section>

            <section>
                <title>Windows setup.exe creation</title>
                <p>For building the Windows setup.exe, the <a href="https://www.jrsoftware.org/download.php/is.exe">Inno Installer version 6</a>
                    is needed. To build the Windows <code>setup.exe</code> file, preferably the work area should
                    be mounted on a Windows computer. Then, on the Windows computer, open
                    the generated file <code>IrScrutinizer/target/IrScrutinizer_inno.iss</code> with
                    the Inno installer, and start the compile. This will generate the desired file
                    <code>IrScutinizer-</code>
                    <em>version</em>
                    <code>.exe</code>.</p>
                <p>Alternatively, the "compatibility layer capable of running
                    Windows applications" software application <a
                        href="https://www.winehq.org">Wine</a> (included in most Linux
                    distributions) can run the ISCC compiler of Inno. The Maven file
                    <code>IrScrutinizer/pom.xml</code> contains an
                    invocation along these lines, conditional upon the existence of the file <code>../Inno Setup 6/ISCC.exe</code>.</p>
            </section>

            <section>
                <title>Mac OS X app creation</title>
                <p>The Maven build creates a file
                    <code>IrScrutinizer-</code>
                    <em>version</em>
                    <code>-macOS.dmg</code>.
                    This file can be directly distributed to the users, to be installed according to
                    <a href="#MacOS+app">these instructions</a>.</p>

                <p>The icon file <code>IrScrutinizer.icns</code> was produced from the Crystal-Clear
                    icon <code>babelfish.png</code> in 128x128 resolution, using the procedure
                    described
                    <a href="https://stackoverflow.com/questions/11770806/why-doesnt-icon-composer-2-4-support-the-1024x1024-size-icon-any-more">here</a>.
                </p>
            </section>

            <section>
                <title>AppImage creation</title>
                <p>To build the x86_64 AppImage, define <code>bundledjdk_url_sans_file</code>
                    and <code>bundledjdk</code> in <code>pom.xml</code> to point to a suitable JDK distrubution file.
                    If a file with name given by <code>bundledjdk</code>
                    is not present in the top level directory, it can be downloaded by the script <code>tools/get-jdk-tar.sh</code>.
                    Then the maven goal <code>make-appimage</code> (which will be invoked during a normal build) will build an appimage for x86_64.
                </p>
            </section>

            <section>
                <title>Test invocation</title>
                <p>For testing purposes, the programs can be invoked from their different target directories.
                    IrScrutinizer can be invoked as</p>
                <source>
                    $ java -jar target/IrScrutinizer-<em>version</em>-jar-with-dependencies.jar
                </source>
                <p>or, if the shared libraries are required, with <em>path-to-shared-libraries</em> denoting the path to a directory containing
                    the shared libraries.</p>
                <source>
                    $ java -Djava.library.path=<em>path-to-shared-libraries</em> -jar target/IrScrutinizer-<em>version</em>-jar-with-dependencies.jar
                </source>

                <p>IrScrutinizer can also be started by double clicking the mentioned jar file,
                    provided that the desktop has been configured to start executable jar with a Java virtual machine.</p>
            </section>

            <section>
                <title>Installation</title>
                <p>Maven does not support something like <code>make install</code> for deployment installing a
                    recently build program on the local host.
                    Instead, the supplied <code>tools/Makefile</code> can
                    install the program to normal Linux locations (in the Makefile <code>INSTALLDIR</code>),</p>
                <source>
                    sudo make -f tools/Makefile install
                </source>
                <p>Equivalently, the just created generic-binary package
                    <code>IrScrutinizer/target/IrScrutinizer-*-bin.zip</code>) can be installed using <a href="#Generic+Binary">these instructions</a>.</p>
            </section>
        </section>
    </body>
</document>
