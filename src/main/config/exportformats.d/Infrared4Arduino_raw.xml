<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (C) 2016, 2023 Bengt Martensson

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<exportformats:exportformat xmlns="http://www.w3.org/1999/xhtml"
                            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                            xmlns:exportformats="http://www.harctoolbox.org/exportformats"
                            xsi:schemaLocation="http://www.harctoolbox.org/exportformats https://www.harctoolbox.org/schemas/exportformats.xsd"
                            name="Infrared4Arduino Raw" extension="ino" multiSignal="true" simpleSequence="false">
    <exportformats:documentation>
        <div>This export format generates an <a href="https://www.arduino.cc/">Arduino</a> sketch file (.ino).
        The raw format will be used. It requires the IR library
        <a href="https://github.com/bengtmartensson/Infrared4Arduino">Infrared4Arduino</a>  (see also <a href="https://www.harctoolbox.org/Infrared4Arduino.html">this</a>).
        This is available in the Arduino library manager under the name <em>Infrared</em>.
        </div>
        <div>Limitations:<ul>
            <li>Does not respect the remote/commandset structure; just throws all commands together.</li>
            <li>Does not support ending sequences (ignores them).</li>
            <li>Does not support toggling signals (includes only the first one).</li>
            <li>Does not detect obvious data duplication, like repeats that are all equal.</li>
            </ul>
        </div>
    </exportformats:documentation>

<xsl:stylesheet xmlns:girr="http://www.harctoolbox.org/Girr"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:java="http://xml.apache.org/xalan/java"
                version="1.0">
    <xsl:include href="C_raw_utils.xsl"/>
    <xsl:output method="text" />

    <xsl:template match="/">
        <xsl:text><![CDATA[// This Arduino sketch was automatically generated by IrScrutinizer.
// using the export format "Infrared4Arduino Raw".

// It supports Infrared4Arduino
// https://github.com/bengtmartensson/Infrared4Arduino,
// see also https://www.harctoolbox.org/Infrared4Arduino.html.
// It is available in the Arduino library manager using the name "Infrared".

// For problems, bugs, and suggestions, please open an issue at
// https://github.com/bengtmartensson/IrScrutinizer/issues

// This file contains C identifiers which have been translated from command
// names. Under rare circumstances, these may clash with predefined variables,
// or cause other problems.

// Define to send this number of signals.
// Leave undefined to be asked every time.
// Define to 3 for Sony devices.
#define NUMBER_OF_SENDS 1

/////////////////////////////////////////////////////
#include <IrSenderPwm.h>
#include <limits.h> // for LONG_MAX

// If your board defines HAS_FLASH_READ and you do not like it,
// feel free to undefine it.
//#undef HAS_FLASH_READ

#ifdef HAS_FLASH_READ
#define LOCATION PROGMEM
#else
#define LOCATION /* nothing */
#endif

// Constants
static constexpr unsigned long BAUD = 115200UL; // Change as desired

// Global variables
static IrSender *irsend = IrSenderPwm::getInstance(true);

//////////////////// Command data ////////////////////////

]]></xsl:text>
    <xsl:apply-templates select="//girr:command" mode="definition"/>

    <xsl:text><![CDATA[
static void sendRaw
#if HAS_FLASH_READ
(const microseconds_t intro_P[], size_t lengthIntro, const microseconds_t repeat_P[],
             size_t lengthRepeat, frequency_t frequency, unsigned times) {
    IrSequence* introSequence = IrSequence::readFlash(intro_P, lengthIntro);
    IrSequence* repeatSequence = IrSequence::readFlash(repeat_P, lengthRepeat);

#else // ! HAS_FLASH_READ
(const microseconds_t intro[], size_t lengthIntro, const microseconds_t repeat[],
             size_t lengthRepeat, frequency_t frequency, unsigned times) {
    // This is truly awful.
    // See https://github.com/bengtmartensson/Infrared4Arduino/issues/88
    // for a possible future fix.
    microseconds_t* intr = new microseconds_t[lengthIntro];
    for (unsigned int i = 0; i < lengthIntro; i++)
        intr[i] = intro[i];
    microseconds_t* rep = new microseconds_t[lengthRepeat];
    for (unsigned int i = 0; i < lengthRepeat; i++)
        rep[i] = repeat[i];
    IrSequence* introSequence = new IrSequence(intr, lengthIntro);
    IrSequence* repeatSequence = new IrSequence(rep, lengthRepeat);
#endif // ! HAS_FLASH_READ

    IrSignal irSignal(*introSequence, *repeatSequence, frequency);
    irsend->sendIrSignal(irSignal, times);
    delete introSequence;
    delete repeatSequence;
}

void setup() {
    Serial.begin(BAUD);
    Serial.setTimeout(LONG_MAX);

    Serial.println(F("Running " __FILE__));
    Serial.println(F("using Infrared4Arduino version " VERSION));
}
    ]]></xsl:text>
        <xsl:call-template name="loop"/>
    </xsl:template>

    <xsl:template match="@frequency">
        <xsl:value-of select="."/>
        <xsl:text>UL</xsl:text>
    </xsl:template>

</xsl:stylesheet>
</exportformats:exportformat>