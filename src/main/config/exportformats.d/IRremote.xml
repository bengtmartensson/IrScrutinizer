<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (C) 2016, 2025 Bengt Martensson

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<exportformats:exportformat xmlns="http://www.w3.org/1999/xhtml"
                            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                            xmlns:exportformats="http://www.harctoolbox.org/exportformats"
                            xsi:schemaLocation="http://www.harctoolbox.org/exportformats http://www.harctoolbox.org/schemas/exportformats.xsd"
                            name="Arduino-IRremote" extension="ino" multiSignal="true" simpleSequence="false">
    <exportformats:documentation>
        <div>This export format generates an <a href="https://www.arduino.cc/">Arduino</a> sketch file (.ino).
        The raw format will be used. It uses the IR library
                <a href="https://github.com/Arduino-IRremote/Arduino-IRremote">IRremote</a>,
        </div>
        <div>Limitations:
            <ul>
            <li>Concatenates the commands of all remotes and commandSets.</li>
            <li>Does not support ending sequences (ignores them).</li>
            <li>Does not support toggling signals (includes only the first one).</li>
            <li>Does not detect obvious data duplication, like repeats that are all equal.</li>
            </ul>
        </div>
    </exportformats:documentation>

<xsl:stylesheet xmlns:girr="http://www.harctoolbox.org/Girr"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:java="http://xml.apache.org/xalan/java"
                xmlns:cidentifierfactory="http://xml.apache.org/xalan/java/org.harctoolbox.irscrutinizer.exporter.CIdentifierFactory"
                xmlns:exporterutils="http://xml.apache.org/xalan/java/org.harctoolbox.irscrutinizer.exporter.ExporterUtils"
                version="1.0">
    <xsl:output method="text" />
    <xsl:variable name="cIdentifierFactory" select="cidentifierfactory:new()"/>
    <xsl:variable name="transformationVersion" select="'2025-02-02'" />
    <xsl:variable name="lowercase" select="'abcdefghijklmnopqrstuvwxyz'" />
    <xsl:variable name="uppercase" select="'ABCDEFGHIJKLMNOPQRSTUVWXYZ'" />

    <xsl:template match="/">
        <xsl:text>// This Arduino sketch was automatically generated by IrScrutinizer,
// using the export format Arduino-IRremote, version </xsl:text>
<xsl:value-of select="$transformationVersion"/>
        <xsl:text><![CDATA[.

// It supports IRremote https://github.com/Arduino-IRremote version 4.
// Earlier versions are not supported.

// For problems, bugs, and suggestions, please open an issue at
// https://github.com/bengtmartensson/IrScrutinizer/issues

// This file contains C identifiers which have been translated from command
// names. Under rare circumstances, these may clash with predefined variables,
// or cause other problems.


/////////////////////////////////////////////////////
#include <Arduino.h>

#if !defined(ARDUINO_ESP32C3_DEV) // This is due to a bug in RISC-V compiler, which requires unused function sections :-(.
#define DISABLE_CODE_FOR_RECEIVER // Disables static receiver code like receive timer ISR handler and static IRReceiver and irparams data. Saves 450 bytes program memory and 269 bytes RAM if receiving functions are not required.
#endif
//#define SEND_PWM_BY_TIMER         // Disable carrier PWM generation in software and use (restricted) hardware PWM.
//#define USE_NO_SEND_PWM           // Use no carrier PWM, just simulate an active low receiver signal. Overrides SEND_PWM_BY_TIMER definition

/*
 * This include defines the actual pin number for pins like IR_RECEIVE_PIN, IR_SEND_PIN for many different boards and architectures
 */
#include "PinDefinitionsAndMore.h" // Snarf from the IRremote distribution; modify as desired.
#include <IRremote.hpp>

static unsigned int repeats = 1U;

]]></xsl:text>
    <!--xsl:apply-templates select="//girr:remote[1][//girr:parameters/@protocol='RC5']" mode="defineRc5Toggle"/>
    <xsl:apply-templates select="//girr:remote[1][//girr:parameters/@protocol='RC6']" mode="defineRc6Toggle"/>
    <xsl:apply-templates select="//girr:remote[1][//girr:parameters/@protocol='Sony12'
                                 or //girr:parameters/@protocol='Sony15'
                                 or //girr:parameters/@protocol='Sony20']" mode="defineSonyRepeats"/-->
    <xsl:text>
</xsl:text>
    <xsl:apply-templates select="//girr:remote//girr:command" mode="definition"/>
<xsl:text>
</xsl:text>

    <!--xsl:text><![CDATA[
static void sendRaw(const uint16_t data_P[], size_t length, uint16_t frequency) {
    uint16_t data[length];
    memcpy_PF(data, (uint_farptr_t) data_P, sizeof(uint16_t) * length);
    irsend.sendRaw(data, length, frequency);
}]></xsl:text-->
<xsl:text><![CDATA[void setup() {
    pinMode(LED_BUILTIN, OUTPUT);
    Serial.setTimeout(60000UL); // Timeout in ms on reading from Serial, adjust as desired
    Serial.begin(115200UL);

    // Just to know which program is running on my Arduino
    Serial.println(F("START " __FILE__ " from " __DATE__ "\r\nUsing library version " VERSION_IRREMOTE));
    Serial.print(F("Send IR signals at pin "));
    Serial.println(IR_SEND_PIN);

    IrSender.begin(); // Start with IR_SEND_PIN -which is defined in PinDefinitionsAndMore.h- as send pin and enable feedback LED at default feedback LED pin
    disableLEDFeedback(); // Disable feedback LED at default feedback LED pin
}

// A pretty silly main loop; feel free to replace by something more inspired.
void loop() {
    Serial.println(F("Enter number of signal to send (1 .. ]]></xsl:text>
    <xsl:value-of select="count(//girr:remote//girr:command)"/>
    <xsl:text>)"));
    long commandno = Serial.parseInt();

    // Uncomment if desired
    /*
    Serial.print(F("Enter number of times to send (default "));
    Serial.print(repeats);
    Serial.print("): ");
    unsigned int answ = Serial.parseInt();
    if (answ != 0U)
        repeats = answ;
    */

    switch (commandno) {
</xsl:text>
        <xsl:apply-templates select="//girr:remote" mode="using"/>
        <xsl:text>
    default:
        Serial.println(F("Invalid number entered, try again"));
        break;
    }
}
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:remote" mode="defineRc5Toggle">
        <xsl:text>static unsigned int rc5Toggle = 1; // its complement really
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:remote" mode="defineRc6Toggle">
        <xsl:text>static unsigned int rc6Toggle = 0;
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:remote" mode="defineSonyRepeats">
        <xsl:text>static const unsigned int sonyRepeats = 3U; // change if desired
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:remote" mode="using">
        <xsl:apply-templates select="//girr:command" mode="using"/>
    </xsl:template>

    <xsl:template match="girr:command" mode="definition">
        <xsl:text>// Command #</xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>: </xsl:text>
        <xsl:value-of select="@name"/>
        <xsl:text>
</xsl:text>
        <xsl:apply-templates select="girr:parameters"/>
        <xsl:apply-templates select="girr:raw[1]" mode="definition"/>
        <xsl:text>
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:command[girr:parameters[@protocol='NEC1'
                         or @protocol='RC5' or @protocol='RC6'
                         or @protocol='Sony12' or @protocol='Sony15' or @protocol='Sony20']]"
                  mode="definition">
        <xsl:text>// Command #</xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>: </xsl:text>
        <xsl:value-of select="@name"/>
        <xsl:text>
</xsl:text>
        <xsl:apply-templates select="girr:parameters"/>
        <xsl:text>
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:parameters">
        <xsl:text>// Protocol: </xsl:text>
        <xsl:value-of select="@protocol"/>
        <xsl:text>, Parameters:</xsl:text>
        <xsl:apply-templates select="girr:parameter"/>
        <xsl:text>
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:parameter">
        <xsl:text> </xsl:text>
        <xsl:value-of select="@name"/>
        <xsl:text>=</xsl:text>
        <xsl:value-of select="@value"/>
        <xsl:text>U</xsl:text>
    </xsl:template>

    <xsl:template match="girr:raw" mode="definition">
        <xsl:apply-templates select="*" mode="definition"/>
    </xsl:template>

    <xsl:template match="girr:intro|girr:repeat" mode="definition">
        <xsl:text>// const uint16_t </xsl:text>
        <xsl:value-of select="name(.)"/>
        <xsl:text>_</xsl:text>
        <xsl:value-of select="cidentifierfactory:mkCIdentifier($cIdentifierFactory,
                                                               string(../../@name),
                                                               count(../../preceding-sibling::girr:command))"/>
        <xsl:text>[] PROGMEM = { </xsl:text>
        <xsl:apply-templates select="*"/>
        <xsl:text> };
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:flash">
        <xsl:value-of select="."/>
        <xsl:text>U, </xsl:text>
    </xsl:template>
    <xsl:template match="girr:gap">
        <xsl:value-of select="."/>
        <xsl:text>U, </xsl:text>
    </xsl:template>
    <xsl:template match="girr:gap[position()=last()]">
        <xsl:if test=". &gt; 65535">
            <xsl:text>65535U</xsl:text>
        </xsl:if>
        <xsl:if test=". &lt;= 65535">
            <xsl:value-of select="."/>
        </xsl:if>
    </xsl:template>

    <!-- Matches commands with not recognized protocol -->
    <xsl:template match="girr:command" mode="using">
        <xsl:text>    case </xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>L:
        IrSender.sendRaw_P(</xsl:text>
        <xsl:apply-templates select="@name" mode="c-raw-P"/>
        <xsl:text>, </xsl:text>
        <xsl:value-of select="count(girr:raw/*/*)"/>
        <xsl:text>, </xsl:text>
        <xsl:value-of select="round(number(girr:raw[1]/@frequency) div 1000)"/>
        <xsl:text>U);
        break;
</xsl:text>
    </xsl:template>

    <xsl:template match="@name" mode="as-comment">
        <xsl:text> // </xsl:text>
        <xsl:value-of select="."/>
    </xsl:template>

    <xsl:template match="@name" mode="c-raw-P">
        <xsl:text>cmd_</xsl:text>
        <xsl:value-of select="."/>
        <xsl:text>_data_P</xsl:text>
    </xsl:template>

    <!-- version without S -->
    <xsl:template match="girr:command[girr:parameters[translate(@protocol,$uppercase,$lowercase)='nec1XXXXXXXXXX']]" mode="using">
        <xsl:text>    case </xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>L: </xsl:text>
        <xsl:apply-templates select="@name" mode="as-comment"/>
        <xsl:text>
        IrSender.sendNEC(</xsl:text>
        <xsl:value-of select="girr:parameters/girr:parameter[@name='D']/@value"/>
        <xsl:text>U, </xsl:text>
        <xsl:value-of select="girr:parameters/girr:parameter[@name='F']/@value"/>
        <xsl:text>U, repeats - 1);
        break;
</xsl:text>
    </xsl:template>

    <!-- version with S -->
    <xsl:template match="girr:command[girr:parameters[translate(@protocol,$uppercase,$lowercase)='nec1'][girr:parameter/@name='S']
and  not((number(girr:parameters/girr:parameter[@name='S']/@value) = 255 - number(girr:parameters/girr:parameter[@name='D']/@value)))
]" mode="using">
        <xsl:text>    case </xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>L: </xsl:text>
        <xsl:apply-templates select="@name" mode="as-comment"/>
        <xsl:text>
        IrSender.sendNEC(</xsl:text>
        <xsl:value-of select="girr:parameters/girr:parameter[@name='D']/@value"/>
        <xsl:text>U | (</xsl:text>
        <xsl:value-of select="girr:parameters/girr:parameter[@name='S']/@value"/>
        <xsl:text>U &lt;&lt; 8), </xsl:text>
        <xsl:value-of select="girr:parameters/girr:parameter[@name='F']/@value"/>
        <xsl:text>U, repeats - 1);
        break;
</xsl:text>
    </xsl:template>


    <!--xsl:template match="girr:command[girr:parameters/@protocol='RC5']" mode="using">
        <xsl:text>    case </xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>L:
        irsend.sendRC5(0x</xsl:text>
        <xsl:value-of select="exporterutils:rc5Data(number(girr:parameters/girr:parameter[@name='D']/@value),number(girr:parameters/girr:parameter[@name='F']/@value),0)"/>
        <xsl:text>U + 0x800U*rc5Toggle, 12U);
        rc5Toggle = 1U - rc5Toggle;
        break;
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:command[girr:parameters/@protocol='RC6']" mode="using">
        <xsl:text>    case </xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>L:
        irsend.sendRC6(0x</xsl:text>
        <xsl:value-of select="exporterutils:twoDigitHex(number(girr:parameters/girr:parameter[@name='D']/@value))"/>
        <xsl:value-of select="exporterutils:twoDigitHex(number(girr:parameters/girr:parameter[@name='F']/@value))"/>
        <xsl:text>U + 0x10000U*rc6Toggle, 20U);
        rc6Toggle = 1U - rc6Toggle;
        break;
</xsl:text>
    </xsl:template>

   <xsl:template match="girr:command[girr:parameters/@protocol='Sony12']" mode="using">
        <xsl:text>    case </xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>L:
        for (unsigned i = 0; i &lt; sonyRepeats; i++) {
            irsend.sendSony(0x</xsl:text>
        <xsl:value-of select="exporterutils:sony12Data(number(girr:parameters/girr:parameter[@name='D']/@value),
                                                       number(girr:parameters/girr:parameter[@name='F']/@value))"/>
        <xsl:text>U, 12U);
            delay(21U);
        }
        break;
</xsl:text>
   </xsl:template>

   <xsl:template match="girr:command[girr:parameters/@protocol='Sony15']" mode="using">
        <xsl:text>    case </xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>L:
        for (unsigned i = 0; i &lt; sonyRepeats; i++) {
            irsend.sendSony(0x</xsl:text>
        <xsl:value-of select="exporterutils:sony15Data(number(girr:parameters/girr:parameter[@name='D']/@value),
                                                       number(girr:parameters/girr:parameter[@name='F']/@value))"/>
        <xsl:text>U, 15U);
            delay(21U);
        }
        break;
</xsl:text>
   </xsl:template>

   <xsl:template match="girr:command[girr:parameters/@protocol='Sony20']" mode="using">
        <xsl:text>    case </xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>L:
        for (unsigned i = 0; i &lt; sonyRepeats; i++) {
            irsend.sendSony(0x</xsl:text>
        <xsl:value-of select="exporterutils:sony20Data(number(girr:parameters/girr:parameter[@name='D']/@value),
                                                       number(girr:parameters/girr:parameter[@name='S']/@value),
                                                       number(girr:parameters/girr:parameter[@name='F']/@value))"/>
        <xsl:text>U, 20U);
            delay(21U);
        }
        break;
</xsl:text>
   </xsl:template-->

    <!--xsl:template match="girr:parameter" mode="arg">
         <xsl:value-of select="@value"/>
         <xsl:text>U, </xsl:text>
    </xsl:template>


    <xsl:template match="girr:raw" mode="arg">
        <xsl:apply-templates select="girr:intro" mode="arg"/>
        <xsl:if test="not(girr:intro)">
            <xsl:apply-templates select="girr:repeat" mode="arg"/>
        </xsl:if>
    </xsl:template-->

    <!--xsl:template match="girr:intro|girr:repeat" mode="arg">
        <xsl:value-of select="name(.)"/>
        <xsl:text>_</xsl:text>
        <xsl:value-of select="cidentifierfactory:mkCIdentifier($cIdentifierFactory,
                                                               string(../../@name),
                                                               count(../../preceding-sibling::girr:command))"/>
        <xsl:text>, </xsl:text>
        <xsl:value-of select="count(*)"/>
        <xsl:text>U, </xsl:text>
    </xsl:template-->

    <!-- just to be on the safe side -->
    <!--xsl:template match="girr:ending">
        <xsl:comment>Warning: ending sequence in command <xsl:value-of select="../../@name"/> was ignored.</xsl:comment>
    </xsl:template-->

</xsl:stylesheet>
</exportformats:exportformat>