<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (C) 2017 Bengt Martensson

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<exportformats:exportformat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                            xmlns:exportformats="http://www.harctoolbox.org/exportformats"
                            xsi:schemaLocation="http://www.harctoolbox.org/exportformats https://www.harctoolbox.org/schemas/exportformats.xsd"
                            name="Pronto Hex Oneshot" extension="txt" multiSignal="false" simpleSequence="true">

    <exportformats:documentation>
        <div>
            This export format takes a single signal, makes a sequence of it consisting
            of the intro sequence, an arbitrary number of copies of the repeat sequence,
            and the (in general empty) ending sequence. This is packed into a Pronto Hex
            format, having the said sequence as its intro, and empty repeat.
        </div>
    </exportformats:documentation>

    <xsl:stylesheet xmlns:girr="http://www.harctoolbox.org/Girr"
                    xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">

        <xsl:output method="text" />

        <xsl:variable name="frequency" select="//girr:command[1]/girr:raw/@frequency"/>

        <xsl:template match="/girr:remotes">
            <xsl:apply-templates select="girr:remote[1]/girr:commandSet[1]/girr:command[1]/girr:raw[1]"/>
        </xsl:template>

        <xsl:template match="girr:raw">
            <xsl:text>0000</xsl:text>
            <xsl:call-template name="prontohex">
                <xsl:with-param name="hex" select="round(4145146 div $frequency)"/>
            </xsl:call-template>
            <xsl:call-template name="prontohex">
                <xsl:with-param name="hex" select="count(girr:intro/girr:flash) + number($noRepeats)*count(girr:repeat/girr:flash) + count(girr:ending/girr:flash)"/>
            </xsl:call-template>
            <xsl:text> 0000</xsl:text>
            <xsl:apply-templates select="girr:intro/*"/>
            <xsl:call-template name="girr:repeat"/>
            <xsl:apply-templates select="girr:ending/*"/>
            <xsl:text>
</xsl:text>
        </xsl:template>

        <xsl:template name="girr:repeat">
            <xsl:param name="n" select="number($noRepeats)"/>
            <xsl:if test="$n &gt; 0">
                <xsl:call-template name="girr:repeat">
                    <xsl:with-param name="n" select="$n - 1"/>
                </xsl:call-template>
            <xsl:apply-templates select="girr:repeat/*"/>
            </xsl:if>
        </xsl:template>

        <xsl:template match="girr:flash|girr:gap">
            <xsl:call-template name="prontohex">
                 <xsl:with-param name="hex" select='round(. * $frequency div 1000000)'/>
            </xsl:call-template>
        </xsl:template>

        <xsl:template name="prontohex">
            <xsl:param name="hex"/>
            <xsl:text> </xsl:text>
            <xsl:call-template name="hexdigit">
                <xsl:with-param name="x" select="floor($hex div 4096)" />
            </xsl:call-template>
            <xsl:call-template name="hexdigit">
                <xsl:with-param name="x" select="floor($hex mod 4096 div 256)" />
            </xsl:call-template>
            <xsl:call-template name="hexdigit">
                <xsl:with-param name="x" select="floor($hex mod 256 div 16)" />
            </xsl:call-template>
            <xsl:call-template name="hexdigit">
                <xsl:with-param name="x" select="$hex mod 16"/>
            </xsl:call-template>
        </xsl:template>

       <xsl:template name="hexdigit">
            <xsl:param name="x"/>
            <xsl:choose>
                <xsl:when test="$x &lt; 10">
                    <xsl:value-of select="$x" />
                </xsl:when>
                <xsl:otherwise>
                    <xsl:choose>
                        <xsl:when test="$x = 10">A</xsl:when>
                        <xsl:when test="$x = 11">B</xsl:when>
                        <xsl:when test="$x = 12">C</xsl:when>
                        <xsl:when test="$x = 13">D</xsl:when>
                        <xsl:when test="$x = 14">E</xsl:when>
                        <xsl:when test="$x = 15">F</xsl:when>
                    </xsl:choose>
                </xsl:otherwise>
            </xsl:choose>
        </xsl:template>

        <xsl:template match="girr:ccf"/>

    </xsl:stylesheet>
</exportformats:exportformat>
