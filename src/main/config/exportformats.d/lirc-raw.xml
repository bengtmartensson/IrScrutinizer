<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (C) 2016 Bengt Martensson

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<exportformats:exportformat xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                            xmlns:exportformats="http://www.harctoolbox.org/exportformats"
                            xsi:schemaLocation="http://www.harctoolbox.org/exportformats https://www.harctoolbox.org/schemas/exportformats.xsd"
                            name="Lirc Raw" extension="lircd.conf" multiSignal="true" simpleSequence="false" metadata="true">

    <exportformats:documentation>
        <div>
            This export format generates a <a href="https://www.lirc.org">Lirc</a> configuration file containing the remotes of the export, and their contained commands,
        all using the raw command format.
        </div>
    </exportformats:documentation>

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:girr="http://www.harctoolbox.org/Girr"
                xmlns:java="http://xml.apache.org/xalan/java"
                xmlns:cidentifierfactory="http://xml.apache.org/xalan/java/org.harctoolbox.irscrutinizer.exporter.CIdentifierFactory"
                xmlns:exporterutils="http://xml.apache.org/xalan/java/org.harctoolbox.irscrutinizer.exporter.ExporterUtils"
                version="1.0">
    <xsl:output method="text" />

    <xsl:template match="/girr:remotes">
        <xsl:text># </xsl:text><xsl:value-of select="@title"/>
<xsl:text>
#
# Creating tool: </xsl:text><xsl:value-of select="$creatingTool"/>
<xsl:text>
# Creating user: </xsl:text><xsl:value-of select="$creatingUser"/>
<xsl:text>
# Creating date: </xsl:text><xsl:value-of select="$creatingDate"/>
<xsl:text>
# Encoding: </xsl:text><xsl:value-of select="$encoding"/>
<xsl:text>
#
</xsl:text>
        <xsl:apply-templates select="girr:remote"/>
    </xsl:template>

    <xsl:template match="girr:remote">
        <xsl:text># Manufacturer: </xsl:text>
            <xsl:value-of select="@manufacturer"/>
<xsl:text>
# Model: </xsl:text>
         <xsl:value-of select="@model"/>
<xsl:text>
# Displayname: </xsl:text><xsl:value-of select="@displayName"/>
<xsl:text>
# Remotename: </xsl:text><xsl:value-of select="@remoteName"/>
<xsl:text>
#
</xsl:text>
    <xsl:apply-templates select="girr:commandSet"/>
    </xsl:template>

<!-- General case, raw codes -->
    <xsl:template match="girr:commandSet">
        <xsl:text>begin remote
&#9;name&#9;</xsl:text><xsl:value-of select="translate(../@name, ' ', '_')"/>
<xsl:text>
&#9;flags&#9;RAW_CODES
&#9;eps&#9;30
&#9;aeps&#9;100
&#9;frequency&#9;</xsl:text><xsl:value-of select="//girr:command[1]/girr:raw/@frequency"/>
<xsl:text>
&#9;gap&#9;</xsl:text>
<xsl:value-of select="(//girr:command/girr:raw/*/girr:gap[position()=last()])[1]"/>
<xsl:text>
&#9;begin raw_codes
</xsl:text>
<xsl:apply-templates select="//girr:command"/>
<xsl:text>&#9;end raw_codes
end remote
</xsl:text>
</xsl:template>

    <xsl:template match="girr:command">
        <xsl:text>&#9;&#9;# </xsl:text>
        <xsl:value-of select="translate(@name, ' ', '_')"/>
        <xsl:text> cannot be rendered, omitted
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:command[girr:raw]">
        <xsl:text>&#9;&#9;name </xsl:text>
        <xsl:value-of select="translate(@name, ' ', '_')"/>
        <xsl:text>
</xsl:text>
        <xsl:apply-templates select="girr:raw[1]"/>
        <xsl:text>
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:raw">
        <xsl:apply-templates select="girr:intro"/>
        <xsl:if test="not(girr:intro)">
            <xsl:apply-templates select="girr:repeat"/>
        </xsl:if>
    </xsl:template>

    <xsl:template match="girr:intro|girr:repeat">
        <xsl:text>&#9;&#9;&#9;</xsl:text>
       <xsl:apply-templates select="*"/>
    </xsl:template>

    <xsl:template match="girr:flash">
        <xsl:value-of select="."/>
        <xsl:text> </xsl:text>
    </xsl:template>

    <xsl:template match="girr:gap">
        <xsl:value-of select="."/>
        <xsl:text> </xsl:text>
    </xsl:template>

    <xsl:template match="girr:gap[position() mod 4 = 0]">
        <xsl:value-of select="."/>
        <xsl:text>
&#9;&#9;&#9;</xsl:text>
    </xsl:template>

    <xsl:template match="girr:gap[position()=last()]"/>

</xsl:stylesheet>
</exportformats:exportformat>
