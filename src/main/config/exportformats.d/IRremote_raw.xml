<?xml version="1.0" encoding="UTF-8"?>
<!--
Copyright (C) 2016, 2023, 2025 Bengt Martensson

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<exportformats:exportformat xmlns="http://www.w3.org/1999/xhtml"
                            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                            xmlns:exportformats="http://www.harctoolbox.org/exportformats"
                            xsi:schemaLocation="http://www.harctoolbox.org/exportformats http://www.harctoolbox.org/schemas/exportformats.xsd"
                            name="Arduino-IRremote-Raw" extension="ino" multiSignal="true" simpleSequence="false">
    <exportformats:documentation>
        <div>This export format generates an <a href="https://www.arduino.cc/">Arduino</a> sketch file (.ino).
        The raw format will be used. It uses the IR library
                <a href="https://github.com/Arduino-IRremote/Arduino-IRremote">IRremote</a> version 4.
                Earlier versions are not supported.
        </div>
        <div>Limitations:
            <ul>
            <li>Only considers the first remote and its first command set.</li>
            <li>Does not support repeating signals: just concatenates intro-, repeat- and ending sequences.</li>
            <li>Does not support toggling signals (includes only the first one).</li>
            <li>Does not detect obvious data duplication, like some signals that are equal.</li>
            </ul>
        </div>
    </exportformats:documentation>

<xsl:stylesheet xmlns:girr="http://www.harctoolbox.org/Girr"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:java="http://xml.apache.org/xalan/java"
                xmlns:cidentifierfactory="http://xml.apache.org/xalan/java/org.harctoolbox.irscrutinizer.exporter.CIdentifierFactory"
                xmlns:exporterutils="http://xml.apache.org/xalan/java/org.harctoolbox.irscrutinizer.exporter.ExporterUtils"
                version="1.0">
    <xsl:output method="text" />
    <xsl:variable name="cIdentifierFactory" select="cidentifierfactory:new()"/>
    <xsl:variable name="transformationVersion" select="'2025-02-03'" />
    <xsl:variable name="raw-data-type" select="'static const uint16_t'" />
    <xsl:variable name="progmem" select="'PROGMEM'" />

    <xsl:template match="/">
        <xsl:call-template name="do-intro" />
        <xsl:call-template name="do-raw-definitions" />
        <xsl:call-template name="define-repeats"/>
        <xsl:call-template name="define-setup"/>
        <xsl:call-template name="define-loop"/>
    </xsl:template>

    <xsl:template name="do-intro" >
        <xsl:text>// This Arduino sketch was automatically generated by IrScrutinizer,
// using the export format </xsl:text>
<xsl:text>Arduino-IRremote-Raw</xsl:text>
    <xsl:text>, version </xsl:text>
<xsl:value-of select="$transformationVersion"/>
        <xsl:text><![CDATA[.

// It supports IRremote https://github.com/Arduino-IRremote version 4.
// Earlier versions are not supported.

// For problems, bugs, and suggestions, please open an issue at
// https://github.com/bengtmartensson/IrScrutinizer/issues

/////////////////////////////////////////////////////
#include <Arduino.h>

#if !defined(ARDUINO_ESP32C3_DEV) // This is due to a bug in RISC-V compiler, which requires unused function sections :-(.
#define DISABLE_CODE_FOR_RECEIVER // Disables static receiver code like receive timer ISR handler and static IRReceiver and irparams data. Saves 450 bytes program memory and 269 bytes RAM if receiving functions are not required.
#endif

//#define SEND_PWM_BY_TIMER         // Disable carrier PWM generation in software and use (restricted) hardware PWM.
//#define USE_NO_SEND_PWM           // Use no carrier PWM, just simulate an active low receiver signal. Overrides SEND_PWM_BY_TIMER definition
//#define NO_LED_FEEDBACK_CODE      // Saves 566 bytes program memory
//#define USE_OPEN_DRAIN_OUTPUT_FOR_SEND_PIN // Use or simulate open drain output mode at send pin. Attention, active state of open drain is LOW, so connect the send LED between positive supply and send pin!

#include "PinDefinitionsAndMore.h" // Snarf from the IRremote distribution; modify as desired.
#include <IRremote.hpp>

// This sketch uses the PROGMEM mechanism to put constant data into flash memory
// as opposed to RAM memory. An "Arduino" board typically has quite small RAM
// memory and "a lot" of flash memory, and the PROGMEM feature locates large
// static dato to flash memory. In order not to use the PROGMEM feature,
// uncomment the following two lines:
//#define PROGMEM /* nothing */
//#define sendRaw_P sendRaw
]]></xsl:text>
    </xsl:template>

    <xsl:template name="do-raw-definitions">
        <xsl:text>// Static data for the commands
</xsl:text>
        <xsl:apply-templates select="//girr:remote[1]/girr:commandSet[1]/girr:command" mode="definition"/>
    </xsl:template>

    <xsl:template name="define-repeats">
        <xsl:text>static unsigned int repeats = 1U;
</xsl:text>
    </xsl:template>

    <xsl:template name="define-setup">
        <xsl:text><![CDATA[
void setup() {
    pinMode(LED_BUILTIN, OUTPUT);
    Serial.setTimeout(60000UL); // Timeout in ms on reading from Serial, adjust as desired
    Serial.begin(115200UL);

    // Just to know which program is running on my Arduino
    Serial.println(F("START " __FILE__ " from " __DATE__ "\r\nUsing library version " VERSION_IRREMOTE));
    Serial.println(F("Send IR signals at pin " STR(IR_SEND_PIN)));

    IrSender.begin(); // Start with IR_SEND_PIN -which is defined in PinDefinitionsAndMore.h- as send pin and enable feedback LED at default feedback LED pin
    disableLEDFeedback(); // Disable feedback LED at default feedback LED pin
}
]]></xsl:text>
    </xsl:template>

    <xsl:template name="define-loop">
        <xsl:text><![CDATA[
// A pretty silly main loop; feel free to replace by something more inspired.
void loop() {
    Serial.println(F("Enter number of signal to send (1 .. ]]></xsl:text>
    <xsl:value-of select="count(//girr:remote//girr:command)"/>
    <xsl:text>)"));
    long commandno = Serial.parseInt();

    // Uncomment if desired
    /*
    Serial.print(F("Enter number of times to send (default "));
    Serial.print(repeats);
    Serial.print("): ");
    unsigned int answ = Serial.parseInt();
    if (answ != 0U)
        repeats = answ;
    */

    switch (commandno) {
</xsl:text>
        <xsl:apply-templates select="//girr:remote[1]/girr:commandSet[1]/girr:command" mode="using"/>
        <xsl:text>
    default:
        Serial.println(F("Invalid number entered, try again"));
        break;
    }
}
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:command" mode="using">
        <xsl:text>    case </xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>L: // </xsl:text>
        <xsl:value-of select="@name" />
        <xsl:text>
        IrSender.sendRaw_P(</xsl:text>
        <xsl:apply-templates select="." mode="raw-name"/>
        <xsl:text>, </xsl:text>
        <xsl:value-of select="count(girr:raw/*/*) - 1"/>
        <xsl:text>, </xsl:text>
        <xsl:value-of select="round(number(girr:raw[1]/@frequency) div 1000)"/>
        <xsl:text>U);
        break;
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:command" mode="definition">
        <xsl:text>// Command #</xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:text>: </xsl:text>
        <xsl:value-of select="@name"/>
        <xsl:text>
</xsl:text>
        <xsl:apply-templates select="girr:parameters"/>
        <xsl:apply-templates select="girr:raw[2]" mode="togglewarning"/>
        <xsl:apply-templates select="girr:raw[1]" mode="definition"/>
        <xsl:text>
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:parameters">
        <xsl:text>// Protocol: </xsl:text>
        <xsl:value-of select="@protocol"/>
        <xsl:text>, Parameters:</xsl:text>
        <xsl:apply-templates select="girr:parameter"/>
        <xsl:text>
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:parameter">
        <xsl:text> </xsl:text>
        <xsl:value-of select="@name"/>
        <xsl:text>=</xsl:text>
        <xsl:value-of select="@value"/>
    </xsl:template>

    <xsl:template match="girr:raw" mode="togglewarning">
        <xsl:text>// Warning: this signal has toggles, i.e. several different raw versions.
// Only the first one is given here.
</xsl:text>
    </xsl:template>

    <xsl:template match="girr:command" mode="raw-name">
         <xsl:text>cmd_</xsl:text>
        <xsl:value-of select="count(preceding-sibling::girr:command) + 1"/>
        <xsl:text>_raw</xsl:text>
    </xsl:template>

    <xsl:template match="girr:raw" mode="definition">
        <xsl:value-of select="$raw-data-type"/>
        <xsl:text> </xsl:text>
        <xsl:apply-templates select=".." mode="raw-name"/>
        <xsl:text>[] </xsl:text>
        <xsl:value-of select="$progmem"/>
        <xsl:text> = { </xsl:text>
        <xsl:apply-templates select="*/*"/>
        <xsl:text> };
</xsl:text>
    </xsl:template>

    <!-- Note (to myself and others): an extra comma in the initializer list is allowed in the specitication.-->
    <xsl:template match="girr:flash|girr:gap">
        <xsl:if test=". &gt; 65535">
            <xsl:text>65535</xsl:text>
        </xsl:if>
        <xsl:if test=". &lt;= 65535">
            <xsl:value-of select="."/>
        </xsl:if>
        <xsl:text>U, </xsl:text>
    </xsl:template>

</xsl:stylesheet>
</exportformats:exportformat>